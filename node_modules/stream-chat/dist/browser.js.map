{"version":3,"file":"browser.js","sources":["../src/base64.ts","../https","../src/channel_state.ts","../src/events.ts","../src/utils.ts","../src/channel.ts","../src/client_state.ts","../src/connection.ts","../jsonwebtoken","../crypto","../src/signing.ts","../src/token_manager.ts","../src/client.ts","../src/permissions.ts"],"sourcesContent":["import { fromByteArray } from 'base64-js';\n\nfunction isString<T>(arrayOrString: string | T[]): arrayOrString is string {\n  return typeof (arrayOrString as string) === 'string';\n}\n\ntype MapGenericCallback<T, U> = (value: T, index: number, array: T[]) => U;\ntype MapStringCallback<U> = (value: string, index: number, string: string) => U;\n\nfunction isMapStringCallback<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): callback is MapStringCallback<U> {\n  return !!callback && isString(arrayOrString);\n}\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map<T, U>(array: T[], callback: MapGenericCallback<T, U>): U[];\nfunction map<U>(string: string, callback: MapStringCallback<U>): U[];\nfunction map<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): U[] {\n  const res = [];\n\n  if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        const kValue = arrayOrString.charAt(k);\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (k in arrayOrString) {\n        const kValue = arrayOrString[k];\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  }\n\n  return res;\n}\n\nexport const encodeBase64 = (data: string): string =>\n  fromByteArray(new Uint8Array(map(data, (char) => char.charCodeAt(0))));\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport const decodeBase64 = (s: string): string => {\n  const e = {} as { [key: string]: number },\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\n","export default null;","import { Channel } from './channel';\nimport {\n  ChannelMemberResponse,\n  ChannelMembership,\n  FormatMessageResponse,\n  Event,\n  LiteralStringForUnion,\n  MessageResponse,\n  ReactionResponse,\n  UnknownType,\n  UserResponse,\n} from './types';\n\n/**\n * ChannelState - A container class for the channel state.\n */\nexport class ChannelState<\n  AttachmentType extends UnknownType = UnknownType,\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  EventType extends UnknownType = UnknownType,\n  MessageType extends UnknownType = UnknownType,\n  ReactionType extends UnknownType = UnknownType,\n  UserType extends UnknownType = UnknownType\n> {\n  _channel: Channel<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  watcher_count: number;\n  typing: Record<\n    string,\n    Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >\n  >;\n  read: Record<string, { last_read: Date; user: UserResponse<UserType> }>;\n  messages: Array<\n    ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['formatMessage']\n    >\n  >;\n  pinnedMessages: Array<\n    ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['formatMessage']\n    >\n  >;\n  threads: Record<\n    string,\n    Array<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >\n    >\n  >;\n  mutedUsers: Array<UserResponse<UserType>>;\n  watchers: Record<string, UserResponse<UserType>>;\n  members: Record<string, ChannelMemberResponse<UserType>>;\n  unreadCount: number;\n  membership: ChannelMembership<UserType>;\n  last_message_at: Date | null;\n  /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */\n  isUpToDate: boolean;\n  constructor(\n    channel: Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = {};\n    this.read = {};\n    this.messages = [];\n    this.pinnedMessages = [];\n    this.threads = {};\n    // a list of users to hide messages from\n    this.mutedUsers = [];\n    this.watchers = {};\n    this.members = {};\n    this.membership = {};\n    this.unreadCount = 0;\n    /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */\n    this.isUpToDate = true;\n    this.last_message_at =\n      channel?.state?.last_message_at != null\n        ? new Date(channel.state.last_message_at)\n        : null;\n  }\n\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} newMessage A new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   *\n   */\n  addMessageSorted(\n    newMessage: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    timestampChanged = false,\n    addIfDoesNotExist = true,\n  ) {\n    return this.addMessagesSorted(\n      [newMessage],\n      timestampChanged,\n      false,\n      addIfDoesNotExist,\n    );\n  }\n\n  /**\n   * formatMessage - Takes the message object. Parses the dates, sets __html\n   * and sets the status to received if missing. Returns a message object\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} message a message object\n   *\n   */\n  formatMessage(\n    message: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): FormatMessageResponse<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    MessageType,\n    ReactionType,\n    UserType\n  > {\n    return {\n      ...message,\n      /**\n       * @deprecated please use `html`\n       */\n      __html: message.html,\n      // parse the date..\n      pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n      created_at: message.created_at ? new Date(message.created_at) : new Date(),\n      updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n      status: message.status || 'received',\n    };\n  }\n\n  /**\n   * addMessagesSorted - Add the list of messages to state and resorts the messages\n   *\n   * @param {Array<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} newMessages A list of messages\n   * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n   * @param {boolean} initializing Whether channel is being initialized.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   *\n   */\n  addMessagesSorted(\n    newMessages: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >[],\n    timestampChanged = false,\n    initializing = false,\n    addIfDoesNotExist = true,\n  ) {\n    for (let i = 0; i < newMessages.length; i += 1) {\n      const message = this.formatMessage(newMessages[i]);\n\n      if (message.user && this._channel?.cid) {\n        /**\n         * Store the reference to user for this channel, so that when we have to\n         * handle updates to user, we can use the reference map, to determine which\n         * channels need to be updated with updated user object.\n         */\n        this._channel\n          .getClient()\n          .state.updateUserReference(message.user, this._channel.cid);\n      }\n\n      if (initializing && message.id && this.threads[message.id]) {\n        // If we are initializing the state of channel (e.g., in case of connection recovery),\n        // then in that case we remove thread related to this message from threads object.\n        // This way we can ensure that we don't have any stale data in thread object\n        // and consumer can refetch the replies.\n        delete this.threads[message.id];\n      }\n\n      if (!this.last_message_at) {\n        this.last_message_at = new Date(message.created_at.getTime());\n      }\n\n      if (message.created_at.getTime() > this.last_message_at.getTime()) {\n        this.last_message_at = new Date(message.created_at.getTime());\n      }\n\n      // update or append the messages...\n      const parentID = message.parent_id;\n\n      // add to the main message list\n      if (!parentID || message.show_in_channel) {\n        this.messages = this._addToMessageList(\n          this.messages,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n      }\n\n      /**\n       * Add message to thread if applicable and the message\n       * was added when querying for replies, or the thread already exits.\n       * This is to prevent the thread state from getting out of sync if\n       * a thread message is shown in channel but older than the newest thread\n       * message. This situation can result in a thread state where a random\n       * message is \"oldest\" message, and newer messages are therefore not loaded.\n       * This can also occur if an old thread message is updated.\n       */\n      if (parentID && !initializing) {\n        const thread = this.threads[parentID] || [];\n        const threadMessages = this._addToMessageList(\n          thread,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n        this.threads[parentID] = threadMessages;\n      }\n    }\n  }\n\n  /**\n   * addPinnedMessages - adds messages in pinnedMessages property\n   *\n   * @param {Array<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} pinnedMessages A list of pinned messages\n   *\n   */\n  addPinnedMessages(\n    pinnedMessages: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >[],\n  ) {\n    for (let i = 0; i < pinnedMessages.length; i += 1) {\n      this.addPinnedMessage(pinnedMessages[i]);\n    }\n  }\n\n  /**\n   * addPinnedMessage - adds message in pinnedMessages\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} pinnedMessage message to update\n   *\n   */\n  addPinnedMessage(\n    pinnedMessage: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this.pinnedMessages = this._addToMessageList(\n      this.pinnedMessages,\n      this.formatMessage(pinnedMessage),\n      false,\n      'pinned_at',\n    );\n  }\n\n  /**\n   * removePinnedMessage - removes pinned message from pinnedMessages\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} message message to remove\n   *\n   */\n  removePinnedMessage(\n    message: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const { result } = this.removeMessageFromArray(this.pinnedMessages, message);\n    this.pinnedMessages = result;\n  }\n\n  addReaction(\n    reaction: ReactionResponse<ReactionType, UserType>,\n    message?: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    enforce_unique?: boolean,\n  ) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._addOwnReactionToMessage(\n        msg.own_reactions,\n        reaction,\n        enforce_unique,\n      );\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  _addOwnReactionToMessage(\n    ownReactions: ReactionResponse<ReactionType, UserType>[] | null | undefined,\n    reaction: ReactionResponse<ReactionType, UserType>,\n    enforce_unique?: boolean,\n  ) {\n    if (enforce_unique) {\n      ownReactions = [];\n    } else {\n      ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n    }\n\n    ownReactions = ownReactions || [];\n    if (this._channel.getClient().userID === reaction.user_id) {\n      ownReactions.push(reaction);\n    }\n\n    return ownReactions;\n  }\n\n  _removeOwnReactionFromMessage(\n    ownReactions: ReactionResponse<ReactionType, UserType>[] | null | undefined,\n    reaction: ReactionResponse<ReactionType, UserType>,\n  ) {\n    if (ownReactions) {\n      return ownReactions.filter(\n        (item) => item.user_id !== reaction.user_id || item.type !== reaction.type,\n      );\n    }\n    return ownReactions;\n  }\n\n  removeReaction(\n    reaction: ReactionResponse<ReactionType, UserType>,\n    message?: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._removeOwnReactionFromMessage(\n        msg.own_reactions,\n        reaction,\n      );\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  removeQuotedMessageReferences(\n    message: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const parseMessage = (\n      m: ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >,\n    ) =>\n      (({\n        ...m,\n        created_at: m.created_at.toString(),\n        pinned_at: m.pinned_at?.toString(),\n        updated_at: m.updated_at?.toString(),\n      } as unknown) as MessageResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >);\n\n    const updatedMessages = this.messages\n      .filter((msg) => msg.quoted_message_id === message.id)\n      .map(parseMessage)\n      .map((msg) => ({ ...msg, quoted_message: { ...message, attachments: [] } }));\n\n    this.addMessagesSorted(updatedMessages, true);\n  }\n\n  /**\n   * Updates all instances of given message in channel state\n   * @param message\n   * @param updateFunc\n   */\n  _updateMessage(\n    message: {\n      id?: string;\n      parent_id?: string;\n      pinned?: boolean;\n      show_in_channel?: boolean;\n    },\n    updateFunc: (\n      msg: ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >,\n    ) => ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['formatMessage']\n    >,\n  ) {\n    const { parent_id, show_in_channel, pinned } = message;\n\n    if (parent_id && this.threads[parent_id]) {\n      const thread = this.threads[parent_id];\n      const msgIndex = thread.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        thread[msgIndex] = updateFunc(thread[msgIndex]);\n        this.threads[parent_id] = thread;\n      }\n    }\n\n    if ((!show_in_channel && !parent_id) || show_in_channel) {\n      const msgIndex = this.messages.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        this.messages[msgIndex] = updateFunc(this.messages[msgIndex]);\n      }\n    }\n\n    if (pinned) {\n      const msgIndex = this.pinnedMessages.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        this.pinnedMessages[msgIndex] = updateFunc(this.pinnedMessages[msgIndex]);\n      }\n    }\n  }\n\n  /**\n   * Setter for isUpToDate.\n   *\n   * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.\n   *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   *                    When false, any new message (received by websocket event - message.new) will not\n   *                    be pushed on to message list.\n   */\n  setIsUpToDate = (isUpToDate: boolean) => {\n    this.isUpToDate = isUpToDate;\n  };\n\n  /**\n   * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n   *\n   * @param {Array<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['formatMessage']>>} messages A list of messages\n   * @param message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {string} sortBy field name to use to sort the messages by\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   */\n  _addToMessageList(\n    messages: Array<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >\n    >,\n    message: ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['formatMessage']\n    >,\n    timestampChanged = false,\n    sortBy: 'pinned_at' | 'created_at' = 'created_at',\n    addIfDoesNotExist = true,\n  ) {\n    const addMessageToList = addIfDoesNotExist || timestampChanged;\n    let messageArr = messages;\n\n    // if created_at has changed, message should be filtered and re-inserted in correct order\n    // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n    if (timestampChanged) {\n      messageArr = messageArr.filter((msg) => !(msg.id && message.id === msg.id));\n    }\n\n    // Get array length after filtering\n    const messageArrayLength = messageArr.length;\n\n    // for empty list just concat and return unless it's an update or deletion\n    if (messageArrayLength === 0 && addMessageToList) {\n      return messageArr.concat(message);\n    } else if (messageArrayLength === 0) {\n      return [...messageArr];\n    }\n\n    const messageTime = (message[sortBy] as Date).getTime();\n    const messageIsNewest =\n      (messageArr[messageArrayLength - 1][sortBy] as Date).getTime() < messageTime;\n\n    // if message is newer than last item in the list concat and return unless it's an update or deletion\n    if (messageIsNewest && addMessageToList) {\n      return messageArr.concat(message);\n    } else if (messageIsNewest) {\n      return [...messageArr];\n    }\n\n    // find the closest index to push the new message\n    let left = 0;\n    let middle = 0;\n    let right = messageArrayLength - 1;\n    while (left <= right) {\n      middle = Math.floor((right + left) / 2);\n      if ((messageArr[middle][sortBy] as Date).getTime() <= messageTime)\n        left = middle + 1;\n      else right = middle - 1;\n    }\n\n    // message already exists and not filtered due to timestampChanged, update and return\n    if (!timestampChanged && message.id) {\n      if (messageArr[left] && message.id === messageArr[left].id) {\n        messageArr[left] = message;\n        return [...messageArr];\n      }\n\n      if (messageArr[left - 1] && message.id === messageArr[left - 1].id) {\n        messageArr[left - 1] = message;\n        return [...messageArr];\n      }\n    }\n\n    // Do not add updated or deleted messages to the list if they do not already exist\n    // or have a timestamp change.\n    if (addMessageToList) {\n      messageArr.splice(left, 0, message);\n    }\n    return [...messageArr];\n  }\n\n  /**\n   * removeMessage - Description\n   *\n   * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n   *\n   * @return {boolean} Returns if the message was removed\n   */\n  removeMessage(messageToRemove: { id: string; parent_id?: string }) {\n    let isRemoved = false;\n    if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n      const { removed, result: threadMessages } = this.removeMessageFromArray(\n        this.threads[messageToRemove.parent_id],\n        messageToRemove,\n      );\n\n      this.threads[messageToRemove.parent_id] = threadMessages;\n      isRemoved = removed;\n    } else {\n      const { removed, result: messages } = this.removeMessageFromArray(\n        this.messages,\n        messageToRemove,\n      );\n      this.messages = messages;\n      isRemoved = removed;\n    }\n\n    return isRemoved;\n  }\n\n  removeMessageFromArray = (\n    msgArray: Array<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >\n    >,\n    msg: { id: string; parent_id?: string },\n  ) => {\n    const result = msgArray.filter(\n      (message) => !(!!message.id && !!msg.id && message.id === msg.id),\n    );\n\n    return { removed: result.length < msgArray.length, result };\n  };\n\n  /**\n   * Updates the message.user property with updated user object, for messages.\n   *\n   * @param {UserResponse<UserType>} user\n   */\n  updateUserMessages = (user: UserResponse<UserType>) => {\n    const _updateUserMessages = (\n      messages: Array<\n        ReturnType<\n          ChannelState<\n            AttachmentType,\n            ChannelType,\n            CommandType,\n            EventType,\n            MessageType,\n            ReactionType,\n            UserType\n          >['formatMessage']\n        >\n      >,\n      user: UserResponse<UserType>,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id === user.id) {\n          messages[i] = { ...m, user };\n        }\n      }\n    };\n\n    _updateUserMessages(this.messages, user);\n\n    for (const parentId in this.threads) {\n      _updateUserMessages(this.threads[parentId], user);\n    }\n\n    _updateUserMessages(this.pinnedMessages, user);\n  };\n\n  /**\n   * Marks the messages as deleted, from deleted user.\n   *\n   * @param {UserResponse<UserType>} user\n   * @param {boolean} hardDelete\n   */\n  deleteUserMessages = (user: UserResponse<UserType>, hardDelete = false) => {\n    const _deleteUserMessages = (\n      messages: Array<\n        ReturnType<\n          ChannelState<\n            AttachmentType,\n            ChannelType,\n            CommandType,\n            EventType,\n            MessageType,\n            ReactionType,\n            UserType\n          >['formatMessage']\n        >\n      >,\n      user: UserResponse<UserType>,\n      hardDelete = false,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id !== user.id) {\n          continue;\n        }\n\n        if (hardDelete) {\n          /**\n           * In case of hard delete, we need to strip down all text, html,\n           * attachments and all the custom properties on message\n           */\n          messages[i] = ({\n            cid: m.cid,\n            created_at: m.created_at,\n            deleted_at: user.deleted_at,\n            id: m.id,\n            latest_reactions: [],\n            mentioned_users: [],\n            own_reactions: [],\n            parent_id: m.parent_id,\n            reply_count: m.reply_count,\n            status: m.status,\n            thread_participants: m.thread_participants,\n            type: 'deleted',\n            updated_at: m.updated_at,\n            user: m.user,\n          } as unknown) as ReturnType<\n            ChannelState<\n              AttachmentType,\n              ChannelType,\n              CommandType,\n              EventType,\n              MessageType,\n              ReactionType,\n              UserType\n            >['formatMessage']\n          >;\n        } else {\n          messages[i] = {\n            ...m,\n            type: 'deleted',\n            deleted_at: user.deleted_at,\n          };\n        }\n      }\n    };\n\n    _deleteUserMessages(this.messages, user, hardDelete);\n\n    for (const parentId in this.threads) {\n      _deleteUserMessages(this.threads[parentId], user, hardDelete);\n    }\n\n    _deleteUserMessages(this.pinnedMessages, user, hardDelete);\n  };\n\n  /**\n   * filterErrorMessages - Removes error messages from the channel state.\n   *\n   */\n  filterErrorMessages() {\n    const filteredMessages = this.messages.filter((message) => message.type !== 'error');\n\n    this.messages = filteredMessages;\n  }\n\n  /**\n   * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n   */\n  clean() {\n    const now = new Date();\n    // prevent old users from showing up as typing\n    for (const [userID, lastEvent] of Object.entries(this.typing)) {\n      const receivedAt =\n        typeof lastEvent.received_at === 'string'\n          ? new Date(lastEvent.received_at)\n          : lastEvent.received_at || new Date();\n      if (now.getTime() - receivedAt.getTime() > 7000) {\n        delete this.typing[userID];\n        this._channel.getClient().dispatchEvent({\n          cid: this._channel.cid,\n          type: 'typing.stop',\n          user: { id: userID },\n        } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n      }\n    }\n  }\n\n  clearMessages() {\n    this.messages = [];\n    this.pinnedMessages = [];\n  }\n}\n","export const EVENT_MAP = {\n  'channel.created': true,\n  'channel.deleted': true,\n  'channel.hidden': true,\n  'channel.muted': true,\n  'channel.truncated': true,\n  'channel.unmuted': true,\n  'channel.updated': true,\n  'channel.visible': true,\n  'health.check': true,\n  'member.added': true,\n  'member.removed': true,\n  'member.updated': true,\n  'message.deleted': true,\n  'message.new': true,\n  'message.read': true,\n  'message.updated': true,\n  'notification.added_to_channel': true,\n  'notification.channel_deleted': true,\n  'notification.channel_mutes_updated': true,\n  'notification.channel_truncated': true,\n  'notification.invite_accepted': true,\n  'notification.invite_rejected': true,\n  'notification.invited': true,\n  'notification.mark_read': true,\n  'notification.message_new': true,\n  'notification.mutes_updated': true,\n  'notification.removed_from_channel': true,\n  'reaction.deleted': true,\n  'reaction.new': true,\n  'reaction.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'user.banned': true,\n  'user.deleted': true,\n  'user.presence.changed': true,\n  'user.unbanned': true,\n  'user.updated': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n\n  // local events\n  'connection.changed': true,\n  'connection.recovered': true,\n};\n\nconst IS_VALID_EVENT_MAP_TYPE = { ...EVENT_MAP, all: true };\n\nexport const isValidEventType = (eventType: string): boolean =>\n  IS_VALID_EVENT_MAP_TYPE[eventType as keyof typeof IS_VALID_EVENT_MAP_TYPE] || false;\n","import FormData from 'form-data';\nimport {\n  AscDesc,\n  LiteralStringForUnion,\n  OwnUserBase,\n  OwnUserResponse,\n  UnknownType,\n  UserResponse,\n} from './types';\n\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */\nexport function logChatPromiseExecution<T>(promise: Promise<T>, name: string) {\n  promise.then().catch((error) => {\n    console.warn(`failed to do ${name}, ran into error: `, error);\n  });\n}\n\nexport const sleep = (m: number): Promise<void> => new Promise((r) => setTimeout(r, m));\n\nexport function isFunction<T>(value: Function | T): value is Function {\n  return (\n    value &&\n    (Object.prototype.toString.call(value) === '[object Function]' ||\n      'function' === typeof value ||\n      value instanceof Function)\n  );\n}\n\nexport const chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000,\n};\n\nfunction isReadableStream(obj: unknown): obj is NodeJS.ReadStream {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    ((obj as NodeJS.ReadStream).readable ||\n      typeof (obj as NodeJS.ReadStream)._read === 'function')\n  );\n}\n\nfunction isBuffer(obj: unknown): obj is Buffer {\n  return (\n    obj != null &&\n    (obj as Buffer).constructor != null &&\n    // @ts-expect-error\n    typeof obj.constructor.isBuffer === 'function' &&\n    // @ts-expect-error\n    obj.constructor.isBuffer(obj)\n  );\n}\n\nfunction isFileWebAPI(uri: unknown): uri is File {\n  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;\n}\n\nexport function isOwnUser<\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  UserType extends UnknownType = UnknownType\n>(\n  user?: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>,\n): user is OwnUserResponse<ChannelType, CommandType, UserType> {\n  return (\n    (user as OwnUserResponse<ChannelType, CommandType, UserType>)?.total_unread_count !==\n    undefined\n  );\n}\n\nexport function isOwnUserBaseProperty(property: string) {\n  const ownUserBaseProperties: {\n    [Property in keyof Required<OwnUserBase>]: boolean;\n  } = {\n    channel_mutes: true,\n    devices: true,\n    mutes: true,\n    total_unread_count: true,\n    unread_channels: true,\n    unread_count: true,\n    invisible: true,\n    roles: true,\n  };\n\n  return ownUserBaseProperties[property as keyof OwnUserBase];\n}\n\nexport function addFileToFormData(\n  uri: string | NodeJS.ReadableStream | Buffer | File,\n  name?: string,\n  contentType?: string,\n) {\n  const data = new FormData();\n\n  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri)) {\n    if (name) data.append('file', uri, name);\n    else data.append('file', uri);\n  } else {\n    data.append('file', {\n      uri,\n      name: name || (uri as string).split('/').reverse()[0],\n      contentType: contentType || undefined,\n      type: contentType || undefined,\n    });\n  }\n\n  return data;\n}\nexport function normalizeQuerySort<T extends Record<string, AscDesc | undefined>>(\n  sort: T | T[],\n) {\n  const sortFields: Array<{ direction: AscDesc; field: keyof T }> = [];\n  const sortArr = Array.isArray(sort) ? sort : [sort];\n  for (const item of sortArr) {\n    const entries = Object.entries(item) as [keyof T, AscDesc][];\n    if (entries.length > 1) {\n      console.warn(\n        \"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\",\n      );\n    }\n    for (const [field, direction] of entries) {\n      sortFields.push({ field, direction });\n    }\n  }\n  return sortFields;\n}\n\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\nexport function retryInterval(numberOfFailures: number) {\n  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n  const max = Math.min(500 + numberOfFailures * 2000, 25000);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n/** adopted from https://github.com/ai/nanoid/blob/master/non-secure/index.js */\nconst alphabet = 'ModuleSymbhasOwnPr0123456789ABCDEFGHNRVfgctiUvzKqYTJkLxpZXIjQW';\nexport function randomId() {\n  let id = '';\n  for (let i = 0; i < 21; i++) {\n    id += alphabet[(Math.random() * 64) | 0];\n  }\n  return id;\n}\n","import { ChannelState } from './channel_state';\nimport { isValidEventType } from './events';\nimport { logChatPromiseExecution, normalizeQuerySort } from './utils';\nimport { StreamChat } from './client';\nimport {\n  APIResponse,\n  BanUserOptions,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMemberAPIResponse,\n  ChannelMemberResponse,\n  ChannelQueryOptions,\n  ChannelResponse,\n  DeleteChannelAPIResponse,\n  Event,\n  EventAPIResponse,\n  EventHandler,\n  EventTypes,\n  FormatMessageResponse,\n  GetMultipleMessagesAPIResponse,\n  GetReactionsAPIResponse,\n  GetRepliesAPIResponse,\n  InviteOptions,\n  LiteralStringForUnion,\n  MarkReadOptions,\n  Message,\n  MessageFilters,\n  MessageResponse,\n  MuteChannelAPIResponse,\n  PaginationOptions,\n  PartialUpdateChannel,\n  PartialUpdateChannelAPIResponse,\n  QueryMembersOptions,\n  Reaction,\n  ReactionAPIResponse,\n  SearchOptions,\n  SearchPayload,\n  SearchAPIResponse,\n  SendMessageAPIResponse,\n  TruncateChannelAPIResponse,\n  UnknownType,\n  UpdateChannelAPIResponse,\n  UserFilters,\n  UserResponse,\n  UserSort,\n  SearchMessageSortBase,\n} from './types';\nimport { Role } from './permissions';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel<\n  AttachmentType extends UnknownType = UnknownType,\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  EventType extends UnknownType = UnknownType,\n  MessageType extends UnknownType = UnknownType,\n  ReactionType extends UnknownType = UnknownType,\n  UserType extends UnknownType = UnknownType\n> {\n  _client: StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  type: string;\n  id: string | undefined;\n  data:\n    | ChannelData<ChannelType>\n    | ChannelResponse<ChannelType, CommandType, UserType>\n    | undefined;\n  _data: ChannelData<ChannelType> | ChannelResponse<ChannelType, CommandType, UserType>;\n  cid: string;\n  listeners: {\n    [key: string]: (\n      | string\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n    )[];\n  };\n  state: ChannelState<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  initialized: boolean;\n  lastKeyStroke?: Date;\n  lastTypingEvent: Date | null;\n  isTyping: boolean;\n  disconnected: boolean;\n\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<ChannelType>} data any additional custom params\n   *\n   * @return {Channel<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} Returns a new uninitialized channel\n   */\n  constructor(\n    client: StreamChat<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    type: string,\n    id: string | undefined,\n    data: ChannelData<ChannelType>,\n  ) {\n    const validTypeRe = /^[\\w_-]+$/;\n    const validIDRe = /^[\\w!_-]+$/;\n\n    if (!validTypeRe.test(type)) {\n      throw new Error(`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`);\n    }\n    if (typeof id === 'string' && !validIDRe.test(id)) {\n      throw new Error(`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`);\n    }\n\n    this._client = client;\n    this.type = type;\n    this.id = id;\n    // used by the frontend, gets updated:\n    this.data = data;\n    // this._data is used for the requests...\n    this._data = { ...data };\n    this.cid = `${type}:${id}`;\n    this.listeners = {};\n    // perhaps the state variable should be private\n    this.state = new ChannelState<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >(this);\n    this.initialized = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n  }\n\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>}\n   */\n  getClient(): StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  > {\n    if (this.disconnected === true) {\n      throw Error(`You can't use a channel after client.disconnect() was called`);\n    }\n    return this._client;\n  }\n\n  /**\n   * getConfig - Get the configs for this channel type\n   *\n   * @return {Record<string, unknown>}\n   */\n  getConfig() {\n    const client = this.getClient();\n    return client.configs[this.type];\n  }\n\n  /**\n   * sendMessage - Send a message to this channel\n   *\n   * @param {Message<AttachmentType, MessageType, UserType>} message The Message object\n   * @param {{ skip_push?: boolean }} [options] Option object, {skip_push: true} to skip sending push notifications\n   *\n   * @return {Promise<SendMessageAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  async sendMessage(\n    message: Message<AttachmentType, MessageType, UserType>,\n    options?: { skip_push?: boolean },\n  ) {\n    const sendMessageResponse = await this.getClient().post<\n      SendMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/message', {\n      message,\n      ...options,\n    });\n\n    // Reset unreadCount to 0.\n    this.state.unreadCount = 0;\n\n    return sendMessageResponse;\n  }\n\n  sendFile(\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<UserType>,\n  ) {\n    return this.getClient().sendFile(\n      `${this._channelURL()}/file`,\n      uri,\n      name,\n      contentType,\n      user,\n    );\n  }\n\n  sendImage(\n    uri: string | NodeJS.ReadableStream | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<UserType>,\n  ) {\n    return this.getClient().sendFile(\n      `${this._channelURL()}/image`,\n      uri,\n      name,\n      contentType,\n      user,\n    );\n  }\n\n  deleteFile(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/file`, { url });\n  }\n\n  deleteImage(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/image`, { url });\n  }\n\n  /**\n   * sendEvent - Send an event on this channel\n   *\n   * @param {Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} event for example {type: 'message.read'}\n   *\n   * @return {Promise<EventAPIResponse<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  async sendEvent(\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this._checkInitialized();\n    return await this.getClient().post<\n      EventAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/event', {\n      event,\n    });\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> | string}  query search query or object MongoDB style filters\n   * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>}} options Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} search messages response\n   */\n  async search(\n    query:\n      | MessageFilters<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | string,\n    options: SearchOptions<MessageType> & {\n      client_id?: string;\n      connection_id?: string;\n      message_filter_conditions?: MessageFilters<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >;\n      query?: string;\n    } = {},\n  ) {\n    if (options.offset && (options.sort || options.next)) {\n      throw Error(`Cannot specify offset with sort or next parameters`);\n    }\n    // Return a list of channels\n    const payload: SearchPayload<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {\n      filter_conditions: { cid: this.cid } as ChannelFilters<\n        ChannelType,\n        CommandType,\n        UserType\n      >,\n      ...options,\n      sort: options.sort\n        ? normalizeQuerySort<SearchMessageSortBase<MessageType>>(options.sort)\n        : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    return await this.getClient().get<\n      SearchAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + '/search', {\n      payload,\n    });\n  }\n\n  /**\n   * queryMembers - Query Members\n   *\n   * @param {UserFilters<UserType>}  filterConditions object MongoDB style filters\n   * @param {UserSort<UserType>} [sort] Sort options, for instance [{created_at: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n   *\n   * @return {Promise<ChannelMemberAPIResponse<UserType>>} Query Members response\n   */\n  async queryMembers(\n    filterConditions: UserFilters<UserType>,\n    sort: UserSort<UserType> = [],\n    options: QueryMembersOptions = {},\n  ) {\n    let id: string | undefined;\n    const type = this.type;\n    let members: string[] | ChannelMemberResponse<UserType>[] | undefined;\n    if (this.id) {\n      id = this.id;\n    } else if (this.data?.members && Array.isArray(this.data.members)) {\n      members = this.data.members;\n    }\n    // Return a list of members\n    return await this.getClient().get<ChannelMemberAPIResponse<UserType>>(\n      this.getClient().baseURL + '/members',\n      {\n        payload: {\n          type,\n          id,\n          members,\n          sort: normalizeQuerySort(sort),\n          filter_conditions: filterConditions,\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * sendReaction - Send a reaction about a message\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction<ReactionType, UserType>} reaction the reaction object for instance {type: 'love'}\n   * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n   *\n   * @return {Promise<ReactionAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  async sendReaction(\n    messageID: string,\n    reaction: Reaction<ReactionType, UserType>,\n    options?: { enforce_unique?: boolean; skip_push?: boolean },\n  ) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n    return await this.getClient().post<\n      ReactionAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + `/messages/${messageID}/reaction`, {\n      reaction,\n      ...options,\n    });\n  }\n\n  /**\n   * deleteReaction - Delete a reaction by user and type\n   *\n   * @param {string} messageID the id of the message from which te remove the reaction\n   * @param {string} reactionType the type of reaction that should be removed\n   * @param {string} [user_id] the id of the user (used only for server side request) default null\n   *\n   * @return {Promise<ReactionAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  deleteReaction(messageID: string, reactionType: string, user_id?: string) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error(\n        'Deleting a reaction requires specifying both the message and reaction type',\n      );\n    }\n\n    const url =\n      this.getClient().baseURL + `/messages/${messageID}/reaction/${reactionType}`;\n    //provided when server side request\n    if (user_id) {\n      return this.getClient().delete<\n        ReactionAPIResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      >(url, { user_id });\n    }\n\n    return this.getClient().delete<\n      ReactionAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(url, {});\n  }\n\n  /**\n   * update - Edit the channel's custom properties\n   *\n   * @param {ChannelData<ChannelType>} channelData The object to update the custom properties of this channel with\n   * @param {Message<AttachmentType, MessageType, UserType>} [updateMessage] Optional message object for channel members notification\n   * @param {{ skip_push?: boolean }} [options] Option object, {skip_push: true} to skip sending push notifications\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async update(\n    channelData:\n      | Partial<ChannelData<ChannelType>>\n      | Partial<ChannelResponse<ChannelType, CommandType, UserType>> = {},\n    updateMessage?: Message<AttachmentType, MessageType, UserType>,\n    options?: { skip_push?: boolean },\n  ) {\n    // Strip out reserved names that will result in API errors.\n    const reserved = [\n      'config',\n      'cid',\n      'created_by',\n      'id',\n      'member_count',\n      'type',\n      'created_at',\n      'updated_at',\n      'last_message_at',\n    ];\n    reserved.forEach((key) => {\n      delete channelData[key];\n    });\n\n    return await this._update({\n      message: updateMessage,\n      data: channelData,\n      ...options,\n    });\n  }\n\n  /**\n   * updatePartial - partial update channel properties\n   *\n   * @param {PartialUpdateChannel<ChannelType>} partial update request\n   *\n   * @return {Promise<PartialUpdateChannelAPIResponse<ChannelType,CommandType, UserType>>}\n   */\n  async updatePartial(update: PartialUpdateChannel<ChannelType>) {\n    return await this.getClient().patch<\n      PartialUpdateChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this._channelURL(), update);\n  }\n\n  /**\n   * enableSlowMode - enable slow mode\n   *\n   * @param {number} coolDownInterval the cooldown interval in seconds\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async enableSlowMode(coolDownInterval: number) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      cooldown: coolDownInterval,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * disableSlowMode - disable slow mode\n   *\n   * @return {Promise<UpdateChannelAPIResponse<ChannelType, AttachmentType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async disableSlowMode() {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      cooldown: 0,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * delete - Delete the channel. Messages are permanently removed.\n   *\n   * @return {Promise<DeleteChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n   */\n  async delete() {\n    return await this.getClient().delete<\n      DeleteChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this._channelURL(), {});\n  }\n\n  /**\n   * truncate - Removes all messages from the channel\n   *\n   * @return {Promise<TruncateChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n   */\n  async truncate() {\n    return await this.getClient().post<\n      TruncateChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this._channelURL() + '/truncate', {});\n  }\n\n  /**\n   * acceptInvite - accept invitation to the channel\n   *\n   * @param {InviteOptions<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async acceptInvite(\n    options: InviteOptions<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {},\n  ) {\n    return await this._update({\n      accept_invite: true,\n      ...options,\n    });\n  }\n\n  /**\n   * rejectInvite - reject invitation to the channel\n   *\n   * @param {InviteOptions<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async rejectInvite(\n    options: InviteOptions<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {},\n  ) {\n    return await this._update({\n      reject_invite: true,\n      ...options,\n    });\n  }\n\n  /**\n   * addMembers - add members to the channel\n   *\n   * @param {{user_id: string, channel_role?: Role}[]} members An array of members to add to the channel\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async addMembers(\n    members: string[] | { user_id: string; channel_role?: Role }[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      add_members: members,\n      message,\n    });\n  }\n\n  /**\n   * addModerators - add moderators to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async addModerators(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      add_moderators: members,\n      message,\n    });\n  }\n\n  /**\n   * assignRoles - sets member roles in a channel\n   *\n   * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async assignRoles(\n    roles: { channel_role: Role; user_id: string }[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      assign_roles: roles,\n      message,\n    });\n  }\n\n  /**\n   * inviteMembers - invite members to the channel\n   *\n   * @param {{user_id: string, channel_role?: Role}[]} members An array of members to invite to the channel\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async inviteMembers(\n    members: { user_id: string; channel_role?: Role }[] | string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      invites: members,\n      message,\n    });\n  }\n\n  /**\n   * removeMembers - remove members from channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async removeMembers(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      remove_members: members,\n      message,\n    });\n  }\n\n  /**\n   * demoteModerators - remove moderator role from channel members\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async demoteModerators(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      demote_moderators: members,\n      message,\n    });\n  }\n\n  /**\n   * _update - executes channel update request\n   * @param payload Object Update Channel payload\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   * TODO: introduce new type instead of Object in the next major update\n   */\n  async _update(payload: Object) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), payload);\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * mute - mutes the current channel\n   * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n   * @return {Promise<MuteChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n   *\n   * example with expiration:\n   * await channel.mute({expiration: moment.duration(2, 'weeks')});\n   *\n   * example server side:\n   * await channel.mute({user_id: userId});\n   *\n   */\n  async mute(opts: { expiration?: number; user_id?: string } = {}) {\n    return await this.getClient().post<\n      MuteChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this.getClient().baseURL + '/moderation/mute/channel', {\n      channel_cid: this.cid,\n      ...opts,\n    });\n  }\n\n  /**\n   * unmute - mutes the current channel\n   * @param {{ user_id?: string}} opts user_id\n   * @return {Promise<APIResponse>} The server response\n   *\n   * example server side:\n   * await channel.unmute({user_id: userId});\n   */\n  async unmute(opts: { user_id?: string } = {}) {\n    return await this.getClient().post<APIResponse>(\n      this.getClient().baseURL + '/moderation/unmute/channel',\n      {\n        channel_cid: this.cid,\n        ...opts,\n      },\n    );\n  }\n\n  /**\n   * muteStatus - returns the mute status for the current channel\n   * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n   */\n  muteStatus(): {\n    createdAt: Date | null;\n    expiresAt: Date | null;\n    muted: boolean;\n  } {\n    this._checkInitialized();\n    return this.getClient()._muteStatus(this.cid);\n  }\n\n  sendAction(messageID: string, formData: Record<string, string>) {\n    this._checkInitialized();\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    return this.getClient().post<\n      SendMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + `/messages/${messageID}/action`, {\n      message_id: messageID,\n      form_data: formData,\n      id: this.id,\n      type: this.type,\n    });\n  }\n\n  /**\n   * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n   * Call this on every keystroke\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async keystroke(parent_id?: string) {\n    if (!this.getConfig()?.typing_events) {\n      return;\n    }\n    const now = new Date();\n    const diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n    this.lastKeyStroke = now;\n    this.isTyping = true;\n    // send a typing.start every 2 seconds\n    if (diff === null || diff > 2000) {\n      this.lastTypingEvent = new Date();\n      await this.sendEvent({\n        type: 'typing.start',\n        parent_id,\n      } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n    }\n  }\n\n  /**\n   * stopTyping - Sets last typing to null and sends the typing.stop event\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async stopTyping(parent_id?: string) {\n    if (!this.getConfig()?.typing_events) {\n      return;\n    }\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    await this.sendEvent({\n      type: 'typing.stop',\n      parent_id,\n    } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n  }\n\n  /**\n   * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n   *\n   * @return {ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['formatMessage']> | undefined} Description\n   */\n  lastMessage() {\n    // get last 5 messages, sort, return the latest\n    // get a slice of the last 5\n    let min = this.state.messages.length - 5;\n    if (min < 0) {\n      min = 0;\n    }\n    const max = this.state.messages.length + 1;\n    const messageSlice = this.state.messages.slice(min, max);\n\n    // sort by pk desc\n    messageSlice.sort((a, b) => b.created_at.getTime() - a.created_at.getTime());\n\n    return messageSlice[0];\n  }\n\n  /**\n   * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkReadOptions<UserType>} data\n   * @return {Promise<EventAPIResponse<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | null>} Description\n   */\n  async markRead(data: MarkReadOptions<UserType> = {}) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<\n      EventAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/read', {\n      ...data,\n    });\n  }\n\n  /**\n   * clean - Cleans the channel state and fires stop typing if needed\n   */\n  clean() {\n    if (this.lastKeyStroke) {\n      const now = new Date();\n      const diff = now.getTime() - this.lastKeyStroke.getTime();\n      if (diff > 1000 && this.isTyping) {\n        logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n      }\n    }\n\n    this.state.clean();\n  }\n\n  /**\n   * watch - Loads the initial channel state and watches for changes\n   *\n   * @param {ChannelQueryOptions<ChannelType, CommandType, UserType>} options additional options for the query endpoint\n   *\n   * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async watch(options?: ChannelQueryOptions<ChannelType, CommandType, UserType>) {\n    const defaultOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    if (!this.getClient()._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    const combined = { ...defaultOptions, ...options };\n    const state = await this.query(combined);\n    this.initialized = true;\n    this.data = state.channel;\n\n    this._client.logger(\n      'info',\n      `channel:watch() - started watching channel ${this.cid}`,\n      {\n        tags: ['channel'],\n        channel: this,\n      },\n    );\n    return state;\n  }\n\n  /**\n   * stopWatching - Stops watching the channel\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  async stopWatching() {\n    const response = await this.getClient().post<APIResponse>(\n      this._channelURL() + '/stop-watching',\n      {},\n    );\n\n    this._client.logger(\n      'info',\n      `channel:watch() - stopped watching channel ${this.cid}`,\n      {\n        tags: ['channel'],\n        channel: this,\n      },\n    );\n\n    return response;\n  }\n\n  /**\n   * getReplies - List the message replies for a parent message\n   *\n   * @param {string} parent_id The message parent id, ie the top of the thread\n   * @param {PaginationOptions & { user?: UserResponse<UserType>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   *\n   * @return {Promise<GetRepliesAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} A response with a list of messages\n   */\n  async getReplies(\n    parent_id: string,\n    options: PaginationOptions & { user?: UserResponse<UserType>; user_id?: string },\n  ) {\n    const data = await this.getClient().get<\n      GetRepliesAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + `/messages/${parent_id}/replies`, {\n      ...options,\n    });\n\n    // add any messages to our thread state\n    if (data.messages) {\n      this.state.addMessagesSorted(data.messages);\n    }\n\n    return data;\n  }\n\n  /**\n   * getReactions - List the reactions, supports pagination\n   *\n   * @param {string} message_id The message id\n   * @param {{ limit?: number; offset?: number }} options The pagination options\n   *\n   * @return {Promise<GetReactionsAPIResponse<ReactionType, UserType>>} Server response\n   */\n  getReactions(message_id: string, options: { limit?: number; offset?: number }) {\n    return this.getClient().get<GetReactionsAPIResponse<ReactionType, UserType>>(\n      this.getClient().baseURL + `/messages/${message_id}/reactions`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * getMessagesById - Retrieves a list of messages by ID\n   *\n   * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n   *\n   * @return {Promise<GetMultipleMessagesAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} Server response\n   */\n  getMessagesById(messageIds: string[]) {\n    return this.getClient().get<\n      GetMultipleMessagesAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/messages', {\n      ids: messageIds.join(','),\n    });\n  }\n\n  /**\n   * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n   * @return {Date | null | undefined}\n   */\n  lastRead() {\n    this._checkInitialized();\n    const { userID } = this.getClient();\n    if (userID) {\n      return this.state.read[userID] ? this.state.read[userID].last_read : null;\n    }\n  }\n\n  _countMessageAsUnread(\n    message:\n      | FormatMessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n  ) {\n    if (message.shadowed) return false;\n    if (message.silent) return false;\n    if (message.user?.id === this.getClient().userID) return false;\n    if (message.user?.id && this.getClient().userMuteStatus(message.user.id))\n      return false;\n\n    if (this.muteStatus().muted) return false;\n\n    return true;\n  }\n\n  /**\n   * countUnread - Count of unread messages\n   *\n   * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n   *\n   * @return {number} Unread count\n   */\n  countUnread(lastRead?: Date | null) {\n    if (!lastRead) return this.state.unreadCount;\n\n    let count = 0;\n    for (let i = 0; i < this.state.messages.length; i += 1) {\n      const message = this.state.messages[i];\n      if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * countUnread - Count the number of unread messages mentioning the current user\n   *\n   * @return {number} Unread mentions count\n   */\n  countUnreadMentions() {\n    const lastRead = this.lastRead();\n    const userID = this.getClient().userID;\n\n    let count = 0;\n    for (let i = 0; i < this.state.messages.length; i += 1) {\n      const message = this.state.messages[i];\n      if (\n        this._countMessageAsUnread(message) &&\n        (!lastRead || message.created_at > lastRead) &&\n        message.mentioned_users?.some((user) => user.id === userID)\n      ) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * create - Creates a new channel\n   *\n   * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  create = async () => {\n    const options = {\n      watch: false,\n      state: false,\n      presence: false,\n    };\n    return await this.query(options);\n  };\n\n  /**\n   * query - Query the API, get messages, members or other channel fields\n   *\n   * @param {ChannelQueryOptions<ChannelType, CommandType, UserType>} options The query options\n   *\n   * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} Returns a query response\n   */\n  async query(options: ChannelQueryOptions<ChannelType, CommandType, UserType>) {\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    let queryURL = `${this.getClient().baseURL}/channels/${this.type}`;\n    if (this.id) {\n      queryURL += `/${this.id}`;\n    }\n\n    const state = await this.getClient().post<\n      ChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(queryURL + '/query', {\n      data: this._data,\n      state: true,\n      ...options,\n    });\n\n    // update the channel id if it was missing\n    if (!this.id) {\n      this.id = state.channel.id;\n      this.cid = state.channel.cid;\n      // set the channel as active...\n\n      const membersStr = state.members\n        .map((member) => member.user_id || member.user?.id)\n        .sort()\n        .join(',');\n      const tempChannelCid = `${this.type}:!members-${membersStr}`;\n\n      if (tempChannelCid in this.getClient().activeChannels) {\n        // This gets set in `client.channel()` function, when channel is created\n        // using members, not id.\n        delete this.getClient().activeChannels[tempChannelCid];\n      }\n\n      if (!(this.cid in this.getClient().activeChannels)) {\n        this.getClient().activeChannels[this.cid] = this;\n      }\n    }\n\n    this.getClient()._addChannelConfig(state);\n\n    // add any messages to our channel state\n    this._initializeState(state);\n\n    return state;\n  }\n\n  /**\n   * banUser - Bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options: BanUserOptions<UserType>) {\n    this._checkInitialized();\n    return await this.getClient().banUser(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * hides the channel from queryChannels for the user until a message is added\n   * If clearHistory is set to true - all messages will be removed for the user\n   *\n   * @param {string | null} userId\n   * @param {boolean} clearHistory\n   * @returns {Promise<APIResponse>}\n   */\n  async hide(userId: string | null = null, clearHistory = false) {\n    this._checkInitialized();\n\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/hide`, {\n      user_id: userId,\n      clear_history: clearHistory,\n    });\n  }\n\n  /**\n   * removes the hidden status for a channel\n   *\n   * @param {string | null} userId\n   * @returns {Promise<APIResponse>}\n   */\n  async show(userId: string | null = null) {\n    this._checkInitialized();\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/show`, {\n      user_id: userId,\n    });\n  }\n\n  /**\n   * unbanUser - Removes the bans for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().unbanUser(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * shadowBan - Shadow bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options: BanUserOptions<UserType>) {\n    this._checkInitialized();\n    return await this.getClient().shadowBan(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * removeShadowBan - Removes the shadow ban for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().removeShadowBan(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * on - Listen to events on this channel.\n   *\n   * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * channel.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | EventTypes} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} [callbackOrNothing] The callback to call\n   */\n  on(\n    eventType: EventTypes,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | EventTypes,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this._client.logger(\n      'info',\n      `Attaching listener for ${key} event on channel ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    this.listeners[key].push(callback);\n\n    return {\n      unsubscribe: () => {\n        this._client.logger(\n          'info',\n          `Removing listener for ${key} event from channel ${this.cid}`,\n          { tags: ['event', 'channel'], channel: this },\n        );\n\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(\n    eventType: EventTypes,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | EventTypes,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this._client.logger(\n      'info',\n      `Removing listener for ${key} event from channel ${this.cid}`,\n      { tags: ['event', 'channel'], channel: this },\n    );\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _handleChannelEvent(\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const channel = this;\n    this._client.logger(\n      'info',\n      `channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    const channelState = channel.state;\n    switch (event.type) {\n      case 'typing.start':\n        if (event.user?.id) {\n          channelState.typing[event.user.id] = event;\n        }\n        break;\n      case 'typing.stop':\n        if (event.user?.id) {\n          delete channelState.typing[event.user.id];\n        }\n        break;\n      case 'message.read':\n        if (event.user?.id) {\n          channelState.read[event.user.id] = {\n            // because in client.ts the handleEvent call that flows to this sets this `event.received_at = new Date();`\n            last_read: event.received_at as Date,\n            user: event.user,\n          };\n\n          if (event.user?.id === this.getClient().user?.id) {\n            channelState.unreadCount = 0;\n          }\n        }\n        break;\n      case 'user.watching.start':\n      case 'user.updated':\n        if (event.user?.id) {\n          channelState.watchers[event.user.id] = event.user;\n        }\n        break;\n      case 'user.watching.stop':\n        if (event.user?.id) {\n          delete channelState.watchers[event.user.id];\n        }\n        break;\n      case 'message.deleted':\n        if (event.message) {\n          if (event.hard_delete) channelState.removeMessage(event.message);\n          else channelState.addMessageSorted(event.message, false, false);\n\n          channelState.removeQuotedMessageReferences(event.message);\n\n          if (event.message.pinned) {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'message.new':\n        if (event.message) {\n          /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */\n          const ownMessage = event.user?.id === this.getClient().user?.id;\n          const isThreadMessage =\n            event.message.parent_id && !event.message.show_in_channel;\n\n          if (this.state.isUpToDate || isThreadMessage) {\n            channelState.addMessageSorted(event.message, ownMessage);\n          }\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n\n          if (ownMessage && event.user?.id) {\n            channelState.unreadCount = 0;\n            channelState.read[event.user.id] = {\n              last_read: new Date(event.created_at as string),\n              user: event.user,\n            };\n          } else if (this._countMessageAsUnread(event.message)) {\n            channelState.unreadCount = channelState.unreadCount + 1;\n          }\n        }\n        break;\n      case 'message.updated':\n        if (event.message) {\n          channelState.addMessageSorted(event.message, false, false);\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          } else {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'channel.truncated':\n        channelState.clearMessages();\n        channelState.unreadCount = 0;\n        break;\n      case 'member.added':\n      case 'member.updated':\n        if (event.member?.user_id) {\n          channelState.members[event.member.user_id] = event.member;\n        }\n        break;\n      case 'member.removed':\n        if (event.user?.id) {\n          delete channelState.members[event.user.id];\n        }\n        break;\n      case 'channel.updated':\n        if (event.channel) {\n          channel.data = event.channel;\n        }\n        break;\n      case 'reaction.new':\n        if (event.message && event.reaction) {\n          event.message = channelState.addReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.deleted':\n        if (event.reaction) {\n          event.message = channelState.removeReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.updated':\n        if (event.reaction) {\n          // assuming reaction.updated is only called if enforce_unique is true\n          event.message = channelState.addReaction(event.reaction, event.message, true);\n        }\n        break;\n      case 'channel.hidden':\n        if (event.clear_history) {\n          channelState.clearMessages();\n        }\n        break;\n      default:\n    }\n\n    // any event can send over the online count\n    if (event.watcher_count !== undefined) {\n      channel.state.watcher_count = event.watcher_count;\n    }\n  }\n\n  _callChannelListeners = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    const channel = this;\n    // gather and call the listeners\n    const listeners = [];\n    if (channel.listeners.all) {\n      listeners.push(...channel.listeners.all);\n    }\n    if (channel.listeners[event.type]) {\n      listeners.push(...channel.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      if (typeof listener !== 'string') {\n        listener(event);\n      }\n    }\n  };\n\n  /**\n   * _channelURL - Returns the channel url\n   *\n   * @return {string} The channel url\n   */\n  _channelURL = () => {\n    if (!this.id) {\n      throw new Error('channel id is not defined');\n    }\n    return `${this.getClient().baseURL}/channels/${this.type}/${this.id}`;\n  };\n\n  _checkInitialized() {\n    if (!this.initialized && !this.getClient()._isUsingServerAuth()) {\n      throw Error(\n        `Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n      );\n    }\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _initializeState(\n    state: ChannelAPIResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const { state: clientState, user, userID } = this.getClient();\n\n    // add the Users\n    if (state.members) {\n      for (const member of state.members) {\n        if (member.user) {\n          clientState.updateUserReference(member.user, this.cid);\n        }\n      }\n    }\n\n    this.state.membership = state.membership || {};\n\n    const messages = state.messages || [];\n    if (!this.state.messages) {\n      this.state.messages = [];\n    }\n    this.state.addMessagesSorted(messages, false, true);\n    if (!this.state.pinnedMessages) {\n      this.state.pinnedMessages = [];\n    }\n    this.state.addPinnedMessages(state.pinned_messages || []);\n    this.state.watcher_count = state.watcher_count || 0;\n    // convert the arrays into objects for easier syncing...\n    if (state.watchers) {\n      for (const watcher of state.watchers) {\n        if (watcher) {\n          clientState.updateUserReference(watcher, this.cid);\n          this.state.watchers[watcher.id] = watcher;\n        }\n      }\n    }\n\n    // initialize read state to last message or current time if the channel is empty\n    // if the user is a member, this value will be overwritten later on otherwise this ensures\n    // that everything up to this point is not marked as unread\n    if (userID != null) {\n      const last_read = this.state.last_message_at || new Date();\n      if (user) {\n        this.state.read[user.id] = {\n          user,\n          last_read,\n        };\n      }\n    }\n\n    // apply read state if part of the state\n    if (state.read) {\n      for (const read of state.read) {\n        const parsedRead = { ...read, last_read: new Date(read.last_read) };\n        this.state.read[read.user.id] = parsedRead;\n        if (read.user.id === user?.id && typeof parsedRead.unread_messages === 'number') {\n          this.state.unreadCount = parsedRead.unread_messages;\n        }\n      }\n    }\n\n    if (state.members) {\n      for (const member of state.members) {\n        if (member.user) {\n          this.state.members[member.user.id] = member;\n        }\n      }\n    }\n  }\n\n  _disconnect() {\n    this._client.logger(\n      'info',\n      `channel:disconnect() - Disconnecting the channel ${this.cid}`,\n      {\n        tags: ['connection', 'channel'],\n        channel: this,\n      },\n    );\n\n    this.disconnected = true;\n    this.state.setIsUpToDate(false);\n  }\n}\n","import { UnknownType, UserResponse } from './types';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState<UserType = UnknownType> {\n  users: {\n    [key: string]: UserResponse<UserType>;\n  };\n  userChannelReferences: { [key: string]: { [key: string]: boolean } };\n  constructor() {\n    // show the status for a certain user...\n    // ie online, offline etc\n    this.users = {};\n    // store which channels contain references to the specified user...\n    this.userChannelReferences = {};\n  }\n\n  updateUsers(users: UserResponse<UserType>[]) {\n    for (const user of users) {\n      this.updateUser(user);\n    }\n  }\n\n  updateUser(user?: UserResponse<UserType>) {\n    if (user != null) {\n      this.users[user.id] = user;\n    }\n  }\n\n  updateUserReference(user: UserResponse<UserType>, channelID: string) {\n    if (user == null) {\n      return;\n    }\n    this.updateUser(user);\n    if (!this.userChannelReferences[user.id]) {\n      this.userChannelReferences[user.id] = {};\n    }\n    this.userChannelReferences[user.id][channelID] = true;\n  }\n\n  deleteAllChannelReference(channelID: string) {\n    for (const userID in this.userChannelReferences) {\n      delete this.userChannelReferences[userID][channelID];\n    }\n  }\n}\n","import WebSocket from 'isomorphic-ws';\nimport { chatCodes, sleep, retryInterval } from './utils';\nimport { TokenManager } from './token_manager';\nimport {\n  ConnectAPIResponse,\n  ConnectionChangeEvent,\n  ConnectionOpen,\n  LiteralStringForUnion,\n  Logger,\n  UnknownType,\n  UserResponse,\n} from './types';\n\n// Type guards to check WebSocket error type\nconst isCloseEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.CloseEvent => (res as WebSocket.CloseEvent).code !== undefined;\n\nconst isErrorEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.ErrorEvent => (res as WebSocket.ErrorEvent).error !== undefined;\n\ntype Constructor<\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  UserType extends UnknownType = UnknownType\n> = {\n  apiKey: string;\n  authType: 'anonymous' | 'jwt';\n  clientID: string;\n  eventCallback: (event: ConnectionChangeEvent) => void;\n  logger: Logger | (() => void);\n  messageCallback: (messageEvent: WebSocket.MessageEvent) => void;\n  recoverCallback: (\n    open?: ConnectionOpen<ChannelType, CommandType, UserType>,\n  ) => Promise<void>;\n  tokenManager: TokenManager<UserType>;\n  user: UserResponse<UserType>;\n  userAgent: string;\n  userID: string;\n  wsBaseURL: string;\n};\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection<\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  UserType extends UnknownType = UnknownType\n> {\n  apiKey: Constructor<ChannelType, CommandType, UserType>['apiKey'];\n  authType: Constructor<ChannelType, CommandType, UserType>['authType'];\n  clientID: Constructor<ChannelType, CommandType, UserType>['clientID'];\n  eventCallback: Constructor<ChannelType, CommandType, UserType>['eventCallback'];\n  logger: Constructor<ChannelType, CommandType, UserType>['logger'];\n  messageCallback: Constructor<ChannelType, CommandType, UserType>['messageCallback'];\n  recoverCallback: Constructor<ChannelType, CommandType, UserType>['recoverCallback'];\n  tokenManager: Constructor<ChannelType, CommandType, UserType>['tokenManager'];\n  user: Constructor<ChannelType, CommandType, UserType>['user'];\n  userAgent: Constructor<ChannelType, CommandType, UserType>['userAgent'];\n  userID: Constructor<ChannelType, CommandType, UserType>['userID'];\n  wsBaseURL: Constructor<ChannelType, CommandType, UserType>['wsBaseURL'];\n\n  connectionID?: string;\n  connectionOpen?: ConnectAPIResponse<ChannelType, CommandType, UserType>;\n  consecutiveFailures: number;\n  pingInterval: number;\n  healthCheckTimeoutRef?: NodeJS.Timeout;\n  isConnecting: boolean;\n  isHealthy: boolean;\n  isResolved?: boolean;\n  lastEvent: Date | null;\n  connectionCheckTimeout: number;\n  connectionCheckTimeoutRef?: NodeJS.Timeout;\n  rejectPromise?: (\n    reason?: Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    },\n  ) => void;\n  resolvePromise?: (value: WebSocket.MessageEvent) => void;\n  totalFailures: number;\n  ws?: WebSocket;\n  wsID: number;\n\n  constructor({\n    apiKey,\n    authType,\n    clientID,\n    eventCallback,\n    logger,\n    messageCallback,\n    recoverCallback,\n    tokenManager,\n    user,\n    userAgent,\n    userID,\n    wsBaseURL,\n  }: Constructor<ChannelType, CommandType, UserType>) {\n    this.wsBaseURL = wsBaseURL;\n    this.clientID = clientID;\n    this.userID = userID;\n    this.user = user;\n    this.authType = authType;\n    this.userAgent = userAgent;\n    this.apiKey = apiKey;\n    this.tokenManager = tokenManager;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Callback when the connection fails and recovers */\n    this.recoverCallback = recoverCallback;\n    this.messageCallback = messageCallback;\n    this.eventCallback = eventCallback;\n    this.logger = logger;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n    this._listenForConnectionChanges();\n  }\n\n  /**\n   * connect - Connect to the WS URL\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async connect() {\n    let healthCheck: ConnectionOpen<ChannelType, CommandType, UserType> | undefined;\n    if (this.isConnecting) {\n      throw Error(\n        `You've called connect twice, can only attempt 1 connection at the time`,\n      );\n    }\n    try {\n      healthCheck = await this._connect();\n      this.isConnecting = false;\n      this.consecutiveFailures = 0;\n\n      this.logger(\n        'info',\n        `connection:connect() - Established ws connection with healthcheck: ${healthCheck}`,\n        {\n          tags: ['connection'],\n        },\n      );\n      return healthCheck;\n    } catch (error) {\n      this.isConnecting = false;\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n        this.logger(\n          'info',\n          'connection:connect() - WS failure due to expired token, so going to try to reload token and reconnect',\n          {\n            tags: ['connection'],\n          },\n        );\n        return this._reconnect({ refreshToken: true });\n      }\n\n      if (!error.isWSFailure) {\n        // This is a permanent failure, throw the error...\n        // We are keeping the error consistent with http error.\n        throw new Error(\n          JSON.stringify({\n            code: error.code,\n            StatusCode: error.StatusCode,\n            message: error.message,\n            isWSFailure: error.isWSFailure,\n          }),\n        );\n      }\n    }\n  }\n\n  _buildUrl = () => {\n    const params = {\n      user_id: this.user.id,\n      user_details: this.user,\n      user_token: this.tokenManager.getToken(),\n      server_determines_connection_id: true,\n    };\n    const qs = encodeURIComponent(JSON.stringify(params));\n    const token = this.tokenManager.getToken();\n    return `${this.wsBaseURL}/connect?json=${qs}&api_key=${this.apiKey}&authorization=${token}&stream-auth-type=${this.authType}&X-Stream-Client=${this.userAgent}`;\n  };\n\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout?: number) {\n    this.logger(\n      'info',\n      `connection:disconnect() - Closing the websocket connection for wsID ${this.wsID}`,\n      {\n        tags: ['connection'],\n      },\n    );\n\n    this.wsID += 1;\n\n    // start by removing all the listeners\n    if (this.healthCheckTimeoutRef) {\n      clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n\n    this._removeConnectionListeners();\n\n    this.isHealthy = false;\n\n    // remove ws handlers...\n    if (this.ws && this.ws.removeAllListeners) {\n      this.ws.removeAllListeners();\n    }\n\n    let isClosedPromise: Promise<void>;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const { ws } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise((resolve) => {\n        const onclose = (event: WebSocket.CloseEvent) => {\n          this.logger(\n            'info',\n            `connection:disconnect() - resolving isClosedPromise ${\n              event ? 'with' : 'without'\n            } close frame`,\n            {\n              tags: ['connection'],\n              event,\n            },\n          );\n          resolve();\n        };\n\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 seconds.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n\n      this.logger(\n        'info',\n        `connection:disconnect() - Manually closed connection by calling client.disconnect()`,\n        {\n          tags: ['connection'],\n        },\n      );\n\n      ws.close(\n        chatCodes.WS_CLOSED_SUCCESS,\n        'Manually closed connection by calling client.disconnect()',\n      );\n    } else {\n      this.logger(\n        'info',\n        `connection:disconnect() - ws connection doesn't exist or it is already closed.`,\n        {\n          tags: ['connection'],\n        },\n      );\n      isClosedPromise = Promise.resolve();\n    }\n\n    delete this.ws;\n\n    return isClosedPromise;\n  }\n\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    await this.tokenManager.tokenReady();\n    this._setupConnectionPromise();\n    const wsURL = this._buildUrl();\n    this.ws = new WebSocket(wsURL);\n    this.ws.onopen = this.onopen.bind(this, this.wsID);\n    this.ws.onclose = this.onclose.bind(this, this.wsID);\n    this.ws.onerror = this.onerror.bind(this, this.wsID);\n    this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n    const response = await this.connectionOpen;\n\n    if (response) {\n      this.connectionID = response.connection_id;\n\n      return response;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(\n    options: { interval?: number; refreshToken?: boolean } = {},\n  ): Promise<void> {\n    this.logger('info', 'connection:_reconnect() - Initiating the reconnect', {\n      tags: ['connection'],\n    });\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this.logger(\n        'info',\n        'connection:_reconnect() - Abort (1) since already connecting or healthy',\n        {\n          tags: ['connection'],\n        },\n      );\n      return;\n    }\n\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this.logger(\n        'info',\n        'connection:_reconnect() - Abort (2) since already connecting or healthy',\n        {\n          tags: ['connection'],\n        },\n      );\n      return;\n    }\n\n    this.isConnecting = true;\n\n    // cleanup the old connection\n    this.logger('info', 'connection:_reconnect() - Destroying current WS connection', {\n      tags: ['connection'],\n    });\n\n    this._destroyCurrentWSConnection();\n\n    if (options.refreshToken) {\n      await this.tokenManager.loadToken();\n    }\n\n    try {\n      const open = await this._connect();\n      if (this.recoverCallback) {\n        this.logger('info', 'connection:_reconnect() - Waiting for recoverCallBack', {\n          tags: ['connection'],\n        });\n        await this.recoverCallback(open);\n        this.logger('info', 'connection:_reconnect() - Finished recoverCallBack', {\n          tags: ['connection'],\n        });\n      }\n      this.isConnecting = false;\n      this.consecutiveFailures = 0;\n    } catch (error) {\n      this.isConnecting = false;\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n        this.logger(\n          'info',\n          'connection:_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect',\n          {\n            tags: ['connection'],\n          },\n        );\n\n        return this._reconnect({ refreshToken: true });\n      }\n\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this.logger(\n          'info',\n          'connection:_reconnect() - WS failure, so going to try to reconnect',\n          {\n            tags: ['connection'],\n          },\n        );\n\n        this._reconnect();\n      }\n    }\n    this.logger('info', 'connection:_reconnect() - == END ==', {\n      tags: ['connection'],\n    });\n  }\n\n  /**\n   * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n   *\n   * @param {Event} event Event with type online or offline\n   *\n   */\n  onlineStatusChanged = (event: Event) => {\n    if (event.type === 'offline') {\n      // mark the connection as down\n      this.logger(\n        'info',\n        'connection:onlineStatusChanged() - Status changing to offline',\n        {\n          tags: ['connection'],\n        },\n      );\n      this._setHealth(false);\n    } else if (event.type === 'online') {\n      // retry right now...\n      // We check this.isHealthy, not sure if it's always\n      // smart to create a new WS connection if the old one is still up and running.\n      // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n      this.logger(\n        'info',\n        `connection:onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`,\n        {\n          tags: ['connection'],\n        },\n      );\n      if (!this.isHealthy) {\n        this._reconnect({ interval: 10 });\n      }\n    }\n  };\n\n  onopen = (wsID: number) => {\n    if (this.wsID !== wsID) return;\n\n    this.logger('info', 'connection:onopen() - onopen callback', {\n      tags: ['connection'],\n      wsID,\n    });\n  };\n\n  onmessage = (wsID: number, event: WebSocket.MessageEvent) => {\n    if (this.wsID !== wsID) return;\n\n    const data = typeof event.data === 'string' ? JSON.parse(event.data) : null;\n\n    // we wait till the first message before we consider the connection open..\n    // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n    // after that a ws.onclose..\n    if (!this.isResolved && data) {\n      if (data.error != null) {\n        this.rejectPromise?.(this._errorFromWSEvent(data, false));\n        return;\n      } else {\n        this.resolvePromise?.(event);\n        // set healthy..\n        this._setHealth(true);\n      }\n    }\n\n    // trigger the event..\n    this.lastEvent = new Date();\n    this.logger('info', 'connection:onmessage() - onmessage callback', {\n      tags: ['connection'],\n      event,\n      wsID,\n    });\n\n    if (data && data.type === 'health.check') {\n      this.scheduleNextPing();\n    }\n\n    this.messageCallback(event);\n    this.scheduleConnectionCheck();\n  };\n\n  onclose = (wsID: number, event: WebSocket.CloseEvent) => {\n    this.logger('info', 'connection:onclose() - onclose callback - ' + event.code, {\n      tags: ['connection'],\n      event,\n      wsID,\n    });\n\n    if (this.wsID !== wsID) return;\n\n    if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n      // this is a permanent error raised by stream..\n      // usually caused by invalid auth details\n      const error = new Error(\n        `WS connection reject with error ${event.reason}`,\n      ) as Error & { reason?: string };\n      error.reason = event.reason;\n      this.rejectPromise?.(error);\n      this.logger(\n        'info',\n        `connection:onclose() - WS connection reject with error ${event.reason}`,\n        {\n          tags: ['connection'],\n          event,\n        },\n      );\n    } else {\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n\n      this.rejectPromise?.(this._errorFromWSEvent(event));\n\n      this.logger(\n        'info',\n        `connection:onclose() - WS connection closed. Calling reconnect ...`,\n        {\n          tags: ['connection'],\n          event,\n        },\n      );\n\n      // reconnect if its an abnormal failure\n      this._reconnect();\n    }\n  };\n\n  onerror = (wsID: number, event: WebSocket.ErrorEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this.consecutiveFailures += 1;\n    this.totalFailures += 1;\n    this._setHealth(false);\n\n    this.rejectPromise?.(this._errorFromWSEvent(event));\n    this.logger('info', `connection:onerror() - WS connection resulted into error`, {\n      tags: ['connection'],\n      event,\n    });\n\n    this._reconnect();\n  };\n\n  /**\n   * _setHealth - Sets the connection to healthy or unhealthy.\n   * Broadcasts an event in case the connection status changed.\n   *\n   * @param {boolean} healthy boolean indicating if the connection is healthy or not\n   *\n   */\n  _setHealth = (healthy: boolean) => {\n    if (healthy && !this.isHealthy) {\n      // yes we are online:\n      this.isHealthy = true;\n      this.eventCallback({\n        type: 'connection.changed',\n        online: true,\n      });\n    }\n\n    if (!healthy && this.isHealthy) {\n      // bummer we are offline\n      this.isHealthy = false;\n      setTimeout(() => {\n        if (!this.isHealthy) {\n          this.eventCallback({\n            type: 'connection.changed',\n            online: false,\n          });\n        }\n      }, 5000);\n    }\n  };\n\n  /**\n   * _errorFromWSEvent - Creates an error object for the WS event\n   *\n   */\n  _errorFromWSEvent = (\n    event: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n    isWSFailure = true,\n  ) => {\n    let code;\n    let statusCode;\n    let message;\n    if (isCloseEvent(event)) {\n      code = event.code;\n      statusCode = 'unknown';\n      message = event.reason;\n    }\n\n    if (isErrorEvent(event)) {\n      code = event.error.code;\n      statusCode = event.error.StatusCode;\n      message = event.error.message;\n    }\n\n    // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n    this.logger('warn', `connection:_errorFromWSEvent() - WS failed with code ${code}`, {\n      tags: ['connection'],\n      event,\n    });\n\n    const error = new Error(\n      `WS failed with code ${code} and reason - ${message}`,\n    ) as Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    };\n    error.code = code;\n    /**\n     * StatusCode does not exist on any event types but has been left\n     * as is to preserve JS functionality during the TS implementation\n     */\n    error.StatusCode = statusCode;\n    error.isWSFailure = isWSFailure;\n    return error;\n  };\n\n  /**\n   * _listenForConnectionChanges - Adds an event listener for the browser going online or offline\n   *\n   */\n  _listenForConnectionChanges = () => {\n    if (\n      typeof window !== 'undefined' &&\n      window != null &&\n      window.addEventListener != null\n    ) {\n      window.addEventListener('offline', this.onlineStatusChanged);\n      window.addEventListener('online', this.onlineStatusChanged);\n    }\n  };\n\n  _removeConnectionListeners = () => {\n    if (\n      typeof window !== 'undefined' &&\n      window != null &&\n      window.addEventListener != null\n    ) {\n      window.removeEventListener('offline', this.onlineStatusChanged);\n      window.removeEventListener('online', this.onlineStatusChanged);\n    }\n  };\n\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n\n    try {\n      if (this.ws && this.ws.removeAllListeners) {\n        this.ws.removeAllListeners();\n      }\n\n      if (this.ws && this.ws.close) {\n        this.ws.close();\n      }\n    } catch (e) {\n      // we don't care\n    }\n  }\n\n  /**\n   * _setupPromise - sets up the this.connectOpen promise\n   */\n  _setupConnectionPromise = () => {\n    const that = this;\n    this.isResolved = false;\n    /** a promise that is resolved once ws.open is called */\n    this.connectionOpen = new Promise<WebSocket.MessageEvent>(function (resolve, reject) {\n      that.resolvePromise = resolve;\n      that.rejectPromise = reject;\n    }).then(\n      (e) => {\n        if (e.data && typeof e.data === 'string') {\n          const data = JSON.parse(e.data) as ConnectionOpen<\n            ChannelType,\n            CommandType,\n            UserType\n          > & {\n            error?: unknown;\n          };\n          if (data && data.error != null) {\n            throw new Error(JSON.stringify(data.error));\n          }\n          return data;\n        } else {\n          return undefined;\n        }\n      },\n      (error) => {\n        throw error;\n      },\n    );\n  };\n\n  /**\n   * Schedules a next health check ping for websocket.\n   */\n  scheduleNextPing = () => {\n    if (this.healthCheckTimeoutRef) {\n      clearTimeout(this.healthCheckTimeoutRef);\n    }\n\n    // 30 seconds is the recommended interval (messenger uses this)\n    this.healthCheckTimeoutRef = setTimeout(() => {\n      // send the healthcheck.., server replies with a health check event\n      const data = [\n        {\n          type: 'health.check',\n          client_id: this.clientID,\n          user_id: this.userID,\n        },\n      ];\n      // try to send on the connection\n      try {\n        this.ws?.send(JSON.stringify(data));\n      } catch (e) {\n        // error will already be detected elsewhere\n      }\n    }, this.pingInterval);\n  };\n\n  /**\n   * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n   * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n   * to be reconnected.\n   */\n  scheduleConnectionCheck = () => {\n    if (this.connectionCheckTimeoutRef) {\n      clearTimeout(this.connectionCheckTimeoutRef);\n    }\n\n    this.connectionCheckTimeoutRef = setTimeout(() => {\n      const now = new Date();\n      if (\n        this.lastEvent &&\n        now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout\n      ) {\n        this.logger('info', 'connection:scheduleConnectionCheck - going to reconnect', {\n          tags: ['connection'],\n        });\n        this._setHealth(false);\n        this._reconnect();\n      }\n    }, this.connectionCheckTimeout);\n  };\n}\n","export default null;","export default null;","import jwt, { Secret, SignOptions } from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { encodeBase64, decodeBase64 } from './base64';\nimport { UnknownType } from './types';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UnknownType} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(\n  apiSecret: Secret,\n  userId: string,\n  extraData: UnknownType = {},\n  jwtOptions: SignOptions = {},\n) {\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n\n  const payload: { user_id: string } & UnknownType = {\n    user_id: userId,\n    ...extraData,\n  };\n\n  // make sure we return a clear error when jwt is shimmed (ie. browser build)\n  if (jwt == null || jwt.sign == null) {\n    throw Error(\n      `Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`,\n    );\n  }\n\n  const opts: SignOptions = Object.assign(\n    { algorithm: 'HS256', noTimestamp: true },\n    jwtOptions,\n  );\n\n  if (payload.iat) {\n    opts.noTimestamp = false;\n  }\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret: Secret, jwtOptions: SignOptions = {}) {\n  const payload = {\n    server: true,\n  };\n\n  const opts: SignOptions = Object.assign(\n    { algorithm: 'HS256', noTimestamp: true },\n    jwtOptions,\n  );\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function UserFromToken(token: string) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id as string;\n}\n\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\nexport function DevToken(userId: string) {\n  return [\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n    encodeBase64(JSON.stringify({ user_id: userId })),\n    'devtoken', // hardcoded signature\n  ].join('.');\n}\n\n/**\n *\n * @param {string} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body: string, secret: string, signature: string) {\n  const key = Buffer.from(secret, 'ascii');\n  const hash = crypto.createHmac('sha256', key).update(body).digest('hex');\n  return hash === signature;\n}\n","import { Secret } from 'jsonwebtoken';\nimport { UserFromToken, JWTServerToken, JWTUserToken } from './signing';\nimport { isFunction } from './utils';\nimport { TokenOrProvider, UnknownType, UserResponse } from './types';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager<UserType extends UnknownType = UnknownType> {\n  loadTokenPromise: Promise<string> | null;\n  type: 'static' | 'provider';\n  secret?: Secret;\n  token?: string;\n  tokenProvider?: TokenOrProvider;\n  user?: UserResponse<UserType>;\n  /**\n   * Constructor\n   *\n   * @param {Secret} secret\n   */\n  constructor(secret?: Secret) {\n    this.loadTokenPromise = null;\n    if (secret) {\n      this.secret = secret;\n    }\n\n    this.type = 'static';\n\n    if (this.secret) {\n      this.token = JWTServerToken(this.secret);\n    }\n  }\n\n  /**\n   * Set the static string token or token provider.\n   * Token provider should return a token string or a promise which resolves to string token.\n   *\n   * @param {TokenOrProvider} tokenOrProvider\n   * @param {UserResponse<UserType>} user\n   */\n  setTokenOrProvider = async (\n    tokenOrProvider: TokenOrProvider,\n    user: UserResponse<UserType>,\n  ) => {\n    this.validateToken(tokenOrProvider, user);\n    this.user = user;\n\n    if (isFunction(tokenOrProvider)) {\n      this.tokenProvider = tokenOrProvider;\n      this.type = 'provider';\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      this.token = tokenOrProvider;\n      this.type = 'static';\n    }\n\n    if (!tokenOrProvider && this.user && this.secret) {\n      this.token = JWTUserToken(this.secret, user.id, {}, {});\n      this.type = 'static';\n    }\n\n    await this.loadToken();\n  };\n\n  /**\n   * Resets the token manager.\n   * Useful for client disconnection or switching user.\n   */\n  reset = () => {\n    this.token = undefined;\n    this.user = undefined;\n    this.loadTokenPromise = null;\n  };\n\n  // Validates the user token.\n  validateToken = (tokenOrProvider: TokenOrProvider, user: UserResponse<UserType>) => {\n    // allow empty token for anon user\n    if (user && user.anon && !tokenOrProvider) return;\n\n    // Don't allow empty token for non-server side client.\n    if (!this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n\n    if (\n      tokenOrProvider &&\n      typeof tokenOrProvider !== 'string' &&\n      !isFunction(tokenOrProvider)\n    ) {\n      throw new Error('user token should either be a string or a function');\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (user.anon && tokenOrProvider === '') return;\n\n      const tokenUserId = UserFromToken(tokenOrProvider);\n      if (\n        tokenOrProvider != null &&\n        (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)\n      ) {\n        throw new Error(\n          'userToken does not have a user_id or is not matching with user.id',\n        );\n      }\n    }\n  };\n\n  // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n  // case a function should wait.\n  tokenReady = () => this.loadTokenPromise;\n\n  // Fetches a token from tokenProvider function and sets in tokenManager.\n  // In case of static token, it will simply resolve to static token.\n  loadToken = () => {\n    // eslint-disable-next-line no-async-promise-executor\n    this.loadTokenPromise = new Promise(async (resolve) => {\n      if (this.type === 'static') {\n        return resolve(this.token as string);\n      }\n\n      if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n        this.token = await this.tokenProvider();\n        resolve(this.token);\n      }\n    });\n\n    return this.loadTokenPromise;\n  };\n\n  // Returns a current token\n  getToken = () => {\n    if (this.token) {\n      return this.token;\n    }\n\n    if (this.user && this.user.anon && !this.token) {\n      return this.token;\n    }\n\n    if (this.secret) {\n      return JWTServerToken(this.secret);\n    }\n\n    throw new Error(\n      `Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`,\n    );\n  };\n\n  isStatic = () => this.type === 'static';\n}\n","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios, { AxiosRequestConfig, AxiosInstance, AxiosResponse } from 'axios';\nimport https from 'https';\nimport WebSocket from 'isomorphic-ws';\n\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\nimport { isValidEventType } from './events';\nimport { JWTUserToken, DevToken, CheckSignature } from './signing';\nimport { TokenManager } from './token_manager';\nimport {\n  isFunction,\n  isOwnUserBaseProperty,\n  addFileToFormData,\n  chatCodes,\n  normalizeQuerySort,\n  randomId,\n  sleep,\n  retryInterval,\n} from './utils';\n\nimport {\n  APIResponse,\n  AppSettings,\n  AppSettingsAPIResponse,\n  BannedUsersFilters,\n  BannedUsersPaginationOptions,\n  BannedUsersResponse,\n  BannedUsersSort,\n  BanUserOptions,\n  BlockList,\n  BlockListResponse,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMute,\n  ChannelOptions,\n  ChannelSort,\n  CheckPushResponse,\n  CheckSQSResponse,\n  Configs,\n  ConnectAPIResponse,\n  ConnectionChangeEvent,\n  CreateChannelOptions,\n  CreateChannelResponse,\n  CreateCommandOptions,\n  CreateCommandResponse,\n  CustomPermissionOptions,\n  DeleteCommandResponse,\n  Device,\n  EndpointName,\n  Event,\n  EventHandler,\n  ExportChannelRequest,\n  ExportChannelResponse,\n  ExportChannelStatusResponse,\n  MessageFlagsFilters,\n  MessageFlagsPaginationOptions,\n  MessageFlagsResponse,\n  FlagMessageResponse,\n  FlagUserResponse,\n  GetChannelTypeResponse,\n  GetCommandResponse,\n  GetRateLimitsResponse,\n  ListChannelResponse,\n  ListCommandsResponse,\n  LiteralStringForUnion,\n  Logger,\n  MarkAllReadOptions,\n  Message,\n  MessageFilters,\n  MessageResponse,\n  Mute,\n  MuteUserOptions,\n  MuteUserResponse,\n  OwnUserResponse,\n  PartialMessageUpdate,\n  PartialUserUpdate,\n  PermissionAPIResponse,\n  PermissionsAPIResponse,\n  ReactionResponse,\n  SearchOptions,\n  SearchPayload,\n  SearchAPIResponse,\n  SendFileAPIResponse,\n  StreamChatOptions,\n  TestPushDataInput,\n  TestSQSDataInput,\n  TokenOrProvider,\n  UnBanUserOptions,\n  UnknownType,\n  UpdateChannelOptions,\n  UpdateChannelResponse,\n  UpdateCommandOptions,\n  UpdateCommandResponse,\n  UpdatedMessage,\n  UpdateMessageAPIResponse,\n  UserCustomEvent,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n  SearchMessageSortBase,\n  SegmentData,\n  Segment,\n  Campaign,\n  CampaignData,\n} from './types';\n\nfunction isString(x: unknown): x is string {\n  return typeof x === 'string' || x instanceof String;\n}\n\nexport class StreamChat<\n  AttachmentType extends UnknownType = UnknownType,\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  EventType extends UnknownType = UnknownType,\n  MessageType extends UnknownType = UnknownType,\n  ReactionType extends UnknownType = UnknownType,\n  UserType extends UnknownType = UnknownType\n> {\n  private static _instance?: unknown | StreamChat; // type is undefined|StreamChat, unknown is due to TS limitations with statics\n\n  _user?: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>;\n  activeChannels: {\n    [key: string]: Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >;\n  };\n  anonymous: boolean;\n  axiosInstance: AxiosInstance;\n  baseURL?: string;\n  browser: boolean;\n  cleaningIntervalRef?: NodeJS.Timeout;\n  clientID?: string;\n  configs: Configs<CommandType>;\n  connecting?: boolean;\n  connectionID?: string;\n  failures?: number;\n  key: string;\n  listeners: {\n    [key: string]: Array<\n      (\n        event: Event<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n      ) => void\n    >;\n  };\n  logger: Logger;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  mutedChannels: ChannelMute<ChannelType, CommandType, UserType>[];\n  mutedUsers: Mute<UserType>[];\n  node: boolean;\n  options: StreamChatOptions;\n  secret?: string;\n  setUserPromise: ConnectAPIResponse<ChannelType, CommandType, UserType> | null;\n  state: ClientState<UserType>;\n  tokenManager: TokenManager<UserType>;\n  user?: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>;\n  userAgent?: string;\n  userID?: string;\n  wsBaseURL?: string;\n  wsConnection: StableWSConnection<ChannelType, CommandType, UserType> | null;\n  wsPromise: ConnectAPIResponse<ChannelType, CommandType, UserType> | null;\n  consecutiveFailures: number;\n\n  /**\n   * Initialize a client\n   *\n   * **Only use constructor for advanced usages. It is strongly advised to use `StreamChat.getInstance()` instead of `new StreamChat()` to reduce integration issues due to multiple WebSocket connections**\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * new StreamChat('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * new StreamChat('api_key', { warmUp:true, timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * new StreamChat('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  constructor(key: string, options?: StreamChatOptions);\n  constructor(key: string, secret?: string, options?: StreamChatOptions);\n  constructor(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ) {\n    // set the key\n    this.key = key;\n    this.listeners = {};\n    this.state = new ClientState<UserType>();\n    // a list of channels to hide ws events from\n    this.mutedChannels = [];\n    this.mutedUsers = [];\n\n    // set the secret\n    if (secretOrOptions && isString(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    }\n\n    // set the options... and figure out defaults...\n    const inputOptions = options\n      ? options\n      : secretOrOptions && !isString(secretOrOptions)\n      ? secretOrOptions\n      : {};\n\n    this.browser =\n      typeof inputOptions.browser !== 'undefined'\n        ? inputOptions.browser\n        : typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    this.options = {\n      timeout: 3000,\n      withCredentials: false, // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true,\n      ...inputOptions,\n    };\n\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000,\n      });\n    }\n\n    this.axiosInstance = axios.create(this.options);\n\n    this.setBaseURL(this.options.baseURL || 'https://chat-us-east-1.stream-io-api.com');\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030');\n    }\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_HOST) {\n      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);\n    }\n\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null;\n    // keeps a reference to all the channels that are in use\n    this.activeChannels = {};\n    // mapping between channel groups and configs\n    this.configs = {};\n    this.anonymous = false;\n\n    // If its a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : () => null;\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n  }\n\n  /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  public static getInstance<\n    AttachmentType extends UnknownType = UnknownType,\n    ChannelType extends UnknownType = UnknownType,\n    CommandType extends string = LiteralStringForUnion,\n    EventType extends UnknownType = UnknownType,\n    MessageType extends UnknownType = UnknownType,\n    ReactionType extends UnknownType = UnknownType,\n    UserType extends UnknownType = UnknownType\n  >(\n    key: string,\n    options?: StreamChatOptions,\n  ): StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  public static getInstance<\n    AttachmentType extends UnknownType = UnknownType,\n    ChannelType extends UnknownType = UnknownType,\n    CommandType extends string = LiteralStringForUnion,\n    EventType extends UnknownType = UnknownType,\n    MessageType extends UnknownType = UnknownType,\n    ReactionType extends UnknownType = UnknownType,\n    UserType extends UnknownType = UnknownType\n  >(\n    key: string,\n    secret?: string,\n    options?: StreamChatOptions,\n  ): StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  public static getInstance<\n    AttachmentType extends UnknownType = UnknownType,\n    ChannelType extends UnknownType = UnknownType,\n    CommandType extends string = LiteralStringForUnion,\n    EventType extends UnknownType = UnknownType,\n    MessageType extends UnknownType = UnknownType,\n    ReactionType extends UnknownType = UnknownType,\n    UserType extends UnknownType = UnknownType\n  >(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ): StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  > {\n    if (!StreamChat._instance) {\n      if (typeof secretOrOptions === 'string') {\n        StreamChat._instance = new StreamChat<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >(key, secretOrOptions, options);\n      } else {\n        StreamChat._instance = new StreamChat<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >(key, secretOrOptions);\n      }\n    }\n\n    return StreamChat._instance as StreamChat<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >;\n  }\n\n  devToken(userID: string) {\n    return DevToken(userID);\n  }\n\n  getAuthType() {\n    return this.anonymous ? 'anonymous' : 'jwt';\n  }\n\n  setBaseURL(baseURL: string) {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n  }\n\n  _hasConnectionID = () => Boolean(this.wsConnection?.connectionID);\n\n  /**\n   * connectUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Returns a promise that resolves when the connection is setup\n   */\n  connectUser = (\n    user: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>,\n    userTokenOrProvider: TokenOrProvider,\n  ): ConnectAPIResponse<ChannelType, CommandType, UserType> => {\n    if (!user.id) {\n      throw new Error('The \"id\" field on the user is missing');\n    }\n\n    /**\n     * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n     * If the user id remains the same we don't throw error\n     */\n    if (this.userID === user.id && this.setUserPromise) {\n      console.warn(\n        'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.',\n      );\n      return this.setUserPromise;\n    }\n\n    if (this.userID) {\n      throw new Error(\n        'Use client.disconnect() before trying to connect as a different user. connectUser was called twice.',\n      );\n    }\n\n    if (\n      (this._isUsingServerAuth() || this.node) &&\n      !this.options.allowServerSideConnect\n    ) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    // we generate the client id client side\n    this.userID = user.id;\n    this.anonymous = false;\n\n    const setTokenPromise = this._setToken(user, userTokenOrProvider);\n    this._setUser(user);\n\n    const wsPromise = this.openConnection();\n\n    this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(\n      (result) => result[1], // We only return connection promise;\n    );\n\n    return this.setUserPromise;\n  };\n\n  /**\n   * @deprecated Please use connectUser() function instead. Its naming is more consistent with its functionality.\n   *\n   * setUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Returns a promise that resolves when the connection is setup\n   */\n  setUser = this.connectUser;\n\n  _setToken = (user: UserResponse<UserType>, userTokenOrProvider: TokenOrProvider) =>\n    this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n\n  _setUser(\n    user: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>,\n  ) {\n    /**\n     * This one is used by the frontend. This is a copy of the current user object stored on backend.\n     * It contains reserved properties and own user properties which are not present in `this._user`.\n     */\n    this.user = user;\n    // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n    this._user = { ...user };\n  }\n\n  /**\n   * Disconnects the websocket connection, without removing the user set on client.\n   * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n   * to call client.openConnection to reconnect to websocket.\n   *\n   * This is mainly useful on mobile side. You can only receive push notifications\n   * if you don't have active websocket connection.\n   * So when your app goes to background, you can call `client.closeConnection`.\n   * And when app comes back to foreground, call `client.openConnection`.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  closeConnection = (timeout?: number) => {\n    if (this.cleaningIntervalRef != null) {\n      clearInterval(this.cleaningIntervalRef);\n      this.cleaningIntervalRef = undefined;\n    }\n\n    if (!this.wsConnection) {\n      return Promise.resolve();\n    }\n\n    return this.wsConnection.disconnect(timeout);\n  };\n\n  /**\n   * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n   */\n  openConnection = async () => {\n    if (!this.userID) {\n      throw Error(\n        'User is not set on client, use client.connectUser or client.connectAnonymousUser instead',\n      );\n    }\n\n    if (this.wsConnection?.isHealthy && this._hasConnectionID()) {\n      this.logger(\n        'info',\n        'client:openConnection() - openConnection called twice, healthy connection already exists',\n        {\n          tags: ['connection', 'client'],\n        },\n      );\n\n      return Promise.resolve();\n    }\n\n    this.clientID = `${this.userID}--${randomId()}`;\n    this.wsPromise = this.connect();\n    this._startCleaning();\n    return this.wsPromise;\n  };\n\n  /**\n   * @deprecated Please use client.openConnction instead.\n   * @private\n   *\n   * Creates a new websocket connection with current user.\n   */\n  _setupConnection = this.openConnection;\n\n  /**\n\t * updateAppSettings - updates application settings\n\t *\n\t * @param {AppSettings} options App settings.\n\t * \t\tIE: {\n\t  \t\t\t\"apn_config\": {\n\t\t\t\t\t\"auth_type\": \"token\",\n\t\t\t\t\t\"auth_key\": fs.readFileSync(\n\t\t\t\t\t\t'./apn-push-auth-key.p8',\n\t\t\t\t\t\t'utf-8',\n\t\t\t\t\t),\n\t\t\t\t\t\"key_id\": \"keyid\",\n\t\t\t\t\t\"team_id\": \"teamid\", //either ALL these 3\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\",\n\t\t\t\t\t\"bundle_id\": \"com.apple.your.app\",\n\t\t\t\t\t\"development\": true\n\t\t\t\t},\n\t\t\t\t\"firebase_config\": {\n\t\t\t\t\t\"server_key\": \"server key from fcm\",\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\"\n\t\t\t\t\t\"data_template\": \"data handlebars template\"\n\t\t\t\t},\n\t\t\t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n\t\t\t}\n\t */\n  async updateAppSettings(options: AppSettings) {\n    if (options.apn_config?.p12_cert) {\n      options.apn_config.p12_cert = Buffer.from(options.apn_config.p12_cert).toString(\n        'base64',\n      );\n    }\n    return await this.patch<APIResponse>(this.baseURL + '/app', options);\n  }\n\n  _normalizeDate = (before: Date | string | null): string | null => {\n    if (before instanceof Date) {\n      before = before.toISOString();\n    }\n\n    if (before === '') {\n      throw new Error(\n        \"Don't pass blank string for since, use null instead if resetting the token revoke\",\n      );\n    }\n\n    return before;\n  };\n\n  /**\n   * Revokes all tokens on application level issued before given time\n   */\n  async revokeTokens(before: Date | string | null) {\n    return await this.updateAppSettings({\n      revoke_tokens_issued_before: this._normalizeDate(before),\n    });\n  }\n\n  /**\n   * Revokes token for a user issued before given time\n   */\n  async revokeUserToken(userID: string, before?: Date | string | null) {\n    return await this.revokeUsersToken([userID], before);\n  }\n\n  /**\n   * Revokes tokens for a list of users issued before given time\n   */\n  async revokeUsersToken(userIDs: string[], before?: Date | string | null) {\n    if (before === undefined) {\n      before = new Date().toISOString();\n    } else {\n      before = this._normalizeDate(before);\n    }\n\n    const users: PartialUserUpdate<UserType>[] = [];\n    for (const userID of userIDs) {\n      users.push({\n        id: userID,\n        set: <Partial<UserResponse<UserType>>>{\n          revoke_tokens_issued_before: before,\n        },\n      });\n    }\n\n    return await this.partialUpdateUsers(users);\n  }\n\n  /**\n   * getAppSettings - retrieves application settings\n   */\n  async getAppSettings() {\n    return await this.get<AppSettingsAPIResponse<CommandType>>(this.baseURL + '/app');\n  }\n\n  /**\n\t * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n\t *\n\t * @param {string} userID User ID. If user has no devices, it will error\n\t * @param {TestPushDataInput} [data] Overrides for push templates/message used\n\t * \t\tIE: {\n\t\t\t\t  messageID: 'id-of-message',//will error if message does not exist\n\t\t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n\t\t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  skipDevices: true, // skip config/device checks and sending to real devices\n\t\t\t}\n\t */\n  async testPushSettings(userID: string, data: TestPushDataInput = {}) {\n    return await this.post<CheckPushResponse>(this.baseURL + '/check_push', {\n      user_id: userID,\n      ...(data.messageID ? { message_id: data.messageID } : {}),\n      ...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n      ...(data.firebaseTemplate ? { firebase_template: data.firebaseTemplate } : {}),\n      ...(data.firebaseDataTemplate\n        ? { firebase_data_template: data.firebaseDataTemplate }\n        : {}),\n      ...(data.skipDevices ? { skip_devices: true } : {}),\n    });\n  }\n\n  /**\n   * testSQSSettings - Tests that the given or configured SQS configuration is valid\n   *\n   * @param {string} userID User ID. If user has no devices, it will error\n   * @param {TestPushDataInput} [data] Overrides for push templates/message used\n   * \t\tIE: {\n\t\t\t\t  messageID: 'id-of-message',//will error if message does not exist\n\t\t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n\t\t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t}\n   */\n  async testSQSSettings(data: TestSQSDataInput = {}) {\n    return await this.post<CheckSQSResponse>(this.baseURL + '/check_sqs', data);\n  }\n\n  /**\n   * Disconnects the websocket and removes the user from client.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = async (timeout?: number) => {\n    this.logger('info', 'client:disconnect() - Disconnecting the client', {\n      tags: ['connection', 'client'],\n    });\n\n    // remove the user specific fields\n    delete this.user;\n    delete this._user;\n    delete this.userID;\n\n    this.anonymous = false;\n\n    const closePromise = this.closeConnection(timeout);\n\n    for (const channel of Object.values(this.activeChannels)) {\n      channel._disconnect();\n    }\n\n    // ensure we no longer return inactive channels\n    this.activeChannels = {};\n    // reset client state\n    this.state = new ClientState();\n    // reset token manager\n    this.tokenManager.reset();\n\n    // close the WS connection\n    return closePromise;\n  };\n\n  /**\n   *\n   * @deprecated Please use client.disconnectUser instead.\n   *\n   * Disconnects the websocket and removes the user from client.\n   */\n  disconnect = this.disconnectUser;\n\n  /**\n   * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n   */\n  connectAnonymousUser = () => {\n    if (\n      (this._isUsingServerAuth() || this.node) &&\n      !this.options.allowServerSideConnect\n    ) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    this.anonymous = true;\n    this.userID = randomId();\n    const anonymousUser = {\n      id: this.userID,\n      anon: true,\n    } as UserResponse<UserType>;\n\n    this._setToken(anonymousUser, '');\n    this._setUser(anonymousUser);\n\n    return this._setupConnection();\n  };\n\n  /**\n   * @deprecated Please use connectAnonymousUser. Its naming is more consistent with its functionality.\n   */\n  setAnonymousUser = this.connectAnonymousUser;\n\n  /**\n   * setGuestUser - Setup a temporary guest user\n   *\n   * @param {UserResponse<UserType>} user Data about this user. IE {name: \"john\"}\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Returns a promise that resolves when the connection is setup\n   */\n  async setGuestUser(user: UserResponse<UserType>) {\n    let response: { access_token: string; user: UserResponse<UserType> } | undefined;\n    this.anonymous = true;\n    try {\n      response = await this.post<\n        APIResponse & { access_token: string; user: UserResponse<UserType> }\n      >(this.baseURL + '/guest', { user });\n    } catch (e) {\n      this.anonymous = false;\n      throw e;\n    }\n    this.anonymous = false;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { created_at, updated_at, last_active, online, ...guestUser } = response.user;\n    return await this.connectUser(\n      guestUser as UserResponse<UserType>,\n      response.access_token,\n    );\n  }\n\n  /**\n   * createToken - Creates a token to authenticate this user. This function is used server side.\n   * The resulting token should be passed to the client side when the users registers or logs in\n   *\n   * @param {string} userID The User ID\n   * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n   *\n   * @return {string} Returns a token\n   */\n  createToken(userID: string, exp?: number, iat?: number) {\n    if (this.secret == null) {\n      throw Error(`tokens can only be created server-side using the API Secret`);\n    }\n    const extra: { exp?: number; iat?: number } = {};\n\n    if (exp) {\n      extra.exp = exp;\n    }\n\n    if (iat) {\n      extra.iat = iat;\n    }\n\n    return JWTUserToken(this.secret, userID, extra, {});\n  }\n\n  /**\n   * on - Listen to events on all channels and users your watching\n   *\n   * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * client.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | string} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} [callbackOrNothing] The callback to call\n   *\n   * @return {{ unsubscribe: () => void }} Description\n   */\n  on(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    eventType: string,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | string,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing\n      ? callbackOrNothing\n      : (callbackOrString as EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this.logger('info', `Attaching listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key].push(callback);\n    return {\n      unsubscribe: () => {\n        this.logger('info', `Removing listener for ${key} event`, {\n          tags: ['event', 'client'],\n        });\n\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    eventType: string,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | string,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing\n      ? callbackOrNothing\n      : (callbackOrString as EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this.logger('info', `Removing listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  _logApiRequest(\n    type: string,\n    url: string,\n    data: unknown,\n    config: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    },\n  ) {\n    this.logger('info', `client: ${type} - Request - ${url}`, {\n      tags: ['api', 'api_request', 'client'],\n      url,\n      payload: data,\n      config,\n    });\n  }\n\n  _logApiResponse<T>(type: string, url: string, response: AxiosResponse<T>) {\n    this.logger(\n      'info',\n      `client:${type} - Response - url: ${url} > status ${response.status}`,\n      {\n        tags: ['api', 'api_response', 'client'],\n        url,\n        response,\n      },\n    );\n  }\n\n  _logApiError(type: string, url: string, error: unknown) {\n    this.logger('error', `client:${type} - Error - url: ${url}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      error,\n    });\n  }\n\n  doAxiosRequest = async <T>(\n    type: string,\n    url: string,\n    data?: unknown,\n    options: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    } = {},\n  ): Promise<T> => {\n    await this.tokenManager.tokenReady();\n    const requestConfig = this._enrichAxiosOptions(options);\n    try {\n      let response: AxiosResponse<T>;\n      this._logApiRequest(type, url, data, requestConfig);\n      switch (type) {\n        case 'get':\n          response = await this.axiosInstance.get(url, requestConfig);\n          break;\n        case 'delete':\n          response = await this.axiosInstance.delete(url, requestConfig);\n          break;\n        case 'post':\n          response = await this.axiosInstance.post(url, data, requestConfig);\n          break;\n        case 'put':\n          response = await this.axiosInstance.put(url, data, requestConfig);\n          break;\n        case 'patch':\n          response = await this.axiosInstance.patch(url, data, requestConfig);\n          break;\n        case 'options':\n          response = await this.axiosInstance.options(url, requestConfig);\n          break;\n        default:\n          throw new Error('Invalid request type');\n      }\n      this._logApiResponse<T>(type, url, response);\n      this.consecutiveFailures = 0;\n      return this.handleResponse(response);\n    } catch (e) {\n      this._logApiError(type, url, e);\n      this.consecutiveFailures += 1;\n      if (e.response) {\n        if (\n          e.response.data.code === chatCodes.TOKEN_EXPIRED &&\n          !this.tokenManager.isStatic()\n        ) {\n          if (this.consecutiveFailures > 1) {\n            await sleep(retryInterval(this.consecutiveFailures));\n          }\n          this.tokenManager.loadToken();\n          return await this.doAxiosRequest<T>(type, url, data, options);\n        }\n        return this.handleResponse(e.response);\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  get<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('get', url, null, { params });\n  }\n\n  put<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('put', url, data);\n  }\n\n  post<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('post', url, data);\n  }\n\n  patch<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('patch', url, data);\n  }\n\n  delete<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('delete', url, null, { params });\n  }\n\n  sendFile(\n    url: string,\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<UserType>,\n  ) {\n    const data = addFileToFormData(uri, name, contentType);\n    if (user != null) data.append('user', JSON.stringify(user));\n\n    return this.doAxiosRequest<SendFileAPIResponse>('post', url, data, {\n      headers: data.getHeaders ? data.getHeaders() : {}, // node vs browser\n      config: {\n        timeout: 0,\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity,\n      },\n    });\n  }\n\n  errorFromResponse<T>(response: AxiosResponse<T & { code?: number; message?: string }>) {\n    let err: Error & { code?: number; response?: AxiosResponse<T>; status?: number };\n    err = new Error(`StreamChat error HTTP code: ${response.status}`);\n    if (response.data && response.data.code) {\n      err = new Error(\n        `StreamChat error code ${response.data.code}: ${response.data.message}`,\n      );\n      err.code = response.data.code;\n    }\n    err.response = response;\n    err.status = response.status;\n    return err;\n  }\n\n  handleResponse<T>(response: AxiosResponse<T>) {\n    const data = response.data;\n    if ((response.status + '')[0] !== '2') {\n      throw this.errorFromResponse<T>(response);\n    }\n    return data;\n  }\n\n  dispatchEvent = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    // client event handlers\n    const postListenerCallbacks = this._handleClientEvent(event);\n\n    // channel event handlers\n    const cid = event.cid;\n    const channel = cid ? this.activeChannels[cid] : undefined;\n    if (channel) {\n      channel._handleChannelEvent(event);\n    }\n\n    this._callClientListeners(event);\n\n    if (channel) {\n      channel._callChannelListeners(event);\n    }\n\n    postListenerCallbacks.forEach((c) => c());\n  };\n\n  handleEvent = (messageEvent: WebSocket.MessageEvent) => {\n    // dispatch the event to the channel listeners\n    const jsonString = messageEvent.data as string;\n    const event = JSON.parse(jsonString) as Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >;\n    event.received_at = new Date();\n    this.dispatchEvent(event);\n  };\n\n  /**\n   * Updates the members and watchers of the currently active channels that contain this user\n   *\n   * @param {UserResponse<UserType>} user\n   */\n  _updateMemberWatcherReferences = (user: UserResponse<UserType>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      /** search the members and watchers and update as needed... */\n      if (channel?.state) {\n        if (channel.state.members[user.id]) {\n          channel.state.members[user.id].user = user;\n        }\n        if (channel.state.watchers[user.id]) {\n          channel.state.watchers[user.id] = user;\n        }\n      }\n    }\n  };\n\n  /**\n   * @deprecated Please _updateMemberWatcherReferences instead.\n   * @private\n   */\n  _updateUserReferences = this._updateMemberWatcherReferences;\n\n  /**\n   * @private\n   *\n   * Updates the messages from the currently active channels that contain this user,\n   * with updated user object.\n   *\n   * @param {UserResponse<UserType>} user\n   */\n  _updateUserMessageReferences = (user: UserResponse<UserType>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      const state = channel.state;\n\n      /** update the messages from this user. */\n      state?.updateUserMessages(user);\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Deletes the messages from the currently active channels that contain this user\n   *\n   * If hardDelete is true, all the content of message will be stripped down.\n   * Otherwise, only 'message.type' will be set as 'deleted'.\n   *\n   * @param {UserResponse<UserType>} user\n   * @param {boolean} hardDelete\n   */\n  _deleteUserMessageReference = (user: UserResponse<UserType>, hardDelete = false) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      const state = channel.state;\n\n      /** deleted the messages from this user. */\n      state?.deleteUserMessages(user, hardDelete);\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Handle following user related events:\n   * - user.presence.changed\n   * - user.updated\n   * - user.deleted\n   *\n   * @param {Event} event\n   */\n  _handleUserEvent = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    if (!event.user) {\n      return;\n    }\n\n    /** update the client.state with any changes to users */\n    if (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n      if (event.user.id === this.userID) {\n        const user = { ...(this.user || {}) };\n        const _user = { ...(this._user || {}) };\n\n        // Remove deleted properties from user objects.\n        for (const key in this.user) {\n          if (key in event.user || isOwnUserBaseProperty(key)) {\n            continue;\n          }\n\n          delete user[key];\n          delete _user[key];\n        }\n\n        /** Updating only available properties in _user object. */\n        for (const key in event.user) {\n          if (_user && key in _user) {\n            _user[key] = event.user[key];\n          }\n        }\n\n        // @ts-expect-error\n        this._user = { ..._user };\n        this.user = { ...user, ...event.user };\n      }\n\n      this.state.updateUser(event.user);\n      this._updateMemberWatcherReferences(event.user);\n    }\n\n    if (event.type === 'user.updated') {\n      this._updateUserMessageReferences(event.user);\n    }\n\n    if (\n      event.type === 'user.deleted' &&\n      event.user.deleted_at &&\n      (event.mark_messages_deleted || event.hard_delete)\n    ) {\n      this._deleteUserMessageReference(event.user, event.hard_delete);\n    }\n  };\n\n  _handleClientEvent(\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const client = this;\n    const postListenerCallbacks = [];\n    this.logger(\n      'info',\n      `client:_handleClientEvent - Received event of type { ${event.type} }`,\n      {\n        tags: ['event', 'client'],\n        event,\n      },\n    );\n\n    if (\n      event.type === 'user.presence.changed' ||\n      event.type === 'user.updated' ||\n      event.type === 'user.deleted'\n    ) {\n      this._handleUserEvent(event);\n    }\n\n    if (event.type === 'health.check' && event.me) {\n      client.user = event.me;\n      client.state.updateUser(event.me);\n      client.mutedChannels = event.me.channel_mutes;\n      client.mutedUsers = event.me.mutes;\n    }\n\n    if (event.channel && event.type === 'notification.message_new') {\n      this.configs[event.channel.type] = event.channel.config;\n    }\n\n    if (event.type === 'notification.channel_mutes_updated' && event.me?.channel_mutes) {\n      const currentMutedChannelIds: string[] = [];\n      const nextMutedChannelIds: string[] = [];\n\n      this.mutedChannels.forEach(\n        (mute) => mute.channel && currentMutedChannelIds.push(mute.channel.cid),\n      );\n      event.me.channel_mutes.forEach(\n        (mute) => mute.channel && nextMutedChannelIds.push(mute.channel.cid),\n      );\n\n      /** Set the unread count of un-muted channels to 0, which is the behaviour of backend */\n      currentMutedChannelIds.forEach((cid) => {\n        if (!nextMutedChannelIds.includes(cid) && this.activeChannels[cid]) {\n          this.activeChannels[cid].state.unreadCount = 0;\n        }\n      });\n\n      this.mutedChannels = event.me.channel_mutes;\n    }\n\n    if (event.type === 'notification.mutes_updated' && event.me?.mutes) {\n      this.mutedUsers = event.me.mutes;\n    }\n\n    if (\n      (event.type === 'channel.deleted' ||\n        event.type === 'notification.channel_deleted') &&\n      event.cid\n    ) {\n      client.state.deleteAllChannelReference(event.cid);\n      this.activeChannels[event.cid]?._disconnect();\n\n      postListenerCallbacks.push(() => {\n        if (!event.cid) return;\n\n        delete this.activeChannels[event.cid];\n      });\n    }\n\n    return postListenerCallbacks;\n  }\n\n  _muteStatus(cid: string) {\n    let muteStatus;\n    for (let i = 0; i < this.mutedChannels.length; i++) {\n      const mute = this.mutedChannels[i];\n      if (mute.channel?.cid === cid) {\n        muteStatus = {\n          muted: mute.expires\n            ? new Date(mute.expires).getTime() > new Date().getTime()\n            : true,\n          createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n          expiresAt: mute.expires ? new Date(mute.expires) : null,\n        };\n        break;\n      }\n    }\n\n    if (muteStatus) {\n      return muteStatus;\n    }\n\n    return {\n      muted: false,\n      createdAt: null,\n      expiresAt: null,\n    };\n  }\n\n  _callClientListeners = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    const client = this;\n    // gather and call the listeners\n    const listeners: Array<\n      (\n        event: Event<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n      ) => void\n    > = [];\n    if (client.listeners.all) {\n      listeners.push(...client.listeners.all);\n    }\n    if (client.listeners[event.type]) {\n      listeners.push(...client.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      listener(event);\n    }\n  };\n\n  recoverState = async () => {\n    this.logger(\n      'info',\n      `client:recoverState() - Start of recoverState with connectionID ${this.wsConnection?.connectionID}`,\n      {\n        tags: ['connection'],\n      },\n    );\n\n    const cids = Object.keys(this.activeChannels);\n    if (cids.length && this.recoverStateOnReconnect) {\n      this.logger(\n        'info',\n        `client:recoverState() - Start the querying of ${cids.length} channels`,\n        { tags: ['connection', 'client'] },\n      );\n\n      await this.queryChannels(\n        { cid: { $in: cids } } as ChannelFilters<ChannelType, CommandType, UserType>,\n        { last_message_at: -1 },\n        { limit: 30 },\n      );\n\n      this.logger('info', 'client:recoverState() - Querying channels finished', {\n        tags: ['connection', 'client'],\n      });\n\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n    } else {\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n    }\n\n    this.wsPromise = Promise.resolve();\n    this.setUserPromise = Promise.resolve();\n  };\n\n  /**\n   * @private\n   */\n  async connect() {\n    this.connecting = true;\n    const client = this;\n    this.failures = 0;\n\n    if (client.userID == null || this._user == null) {\n      throw Error(\n        'Call connectUser or connectAnonymousUser before starting the connection',\n      );\n    }\n\n    if (client.wsBaseURL == null) {\n      throw Error('Websocket base url not set');\n    }\n\n    if (client.clientID == null) {\n      throw Error('clientID is not set');\n    }\n\n    // The StableWSConnection handles all the reconnection logic.\n    this.wsConnection = new StableWSConnection<ChannelType, CommandType, UserType>({\n      wsBaseURL: client.wsBaseURL,\n      clientID: client.clientID,\n      userID: client.userID,\n      tokenManager: client.tokenManager,\n      user: this._user,\n      authType: this.getAuthType(),\n      userAgent: this.getUserAgent(),\n      apiKey: this.key,\n      recoverCallback: this.recoverState,\n      messageCallback: this.handleEvent,\n      eventCallback: this.dispatchEvent as (event: ConnectionChangeEvent) => void,\n      logger: this.logger,\n    });\n\n    let warmUpPromise;\n    if (this.options.warmUp) {\n      warmUpPromise = this.doAxiosRequest('options', this.baseURL + '/connect');\n    }\n    const handshake = await this.wsConnection.connect();\n    try {\n      await warmUpPromise;\n    } catch (e) {\n      this.logger('error', 'Warmup request failed', {\n        error: e,\n      });\n    }\n\n    return handshake;\n  }\n\n  /**\n   * queryUsers - Query users and watch user presence\n   *\n   * @param {UserFilters<UserType>} filterConditions MongoDB style filter conditions\n   * @param {UserSort<UserType>} sort Sort options, for instance [{last_active: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {UserOptions} options Option object, {presence: true}\n   *\n   * @return {Promise<APIResponse & { users: Array<UserResponse<UserType>> }>} User Query Response\n   */\n  async queryUsers(\n    filterConditions: UserFilters<UserType>,\n    sort: UserSort<UserType> = [],\n    options: UserOptions = {},\n  ) {\n    const defaultOptions = {\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.setUserPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.presence = false;\n    }\n\n    // Return a list of users\n    const data = await this.get<\n      APIResponse & {\n        users: Array<UserResponse<UserType>>;\n      }\n    >(this.baseURL + '/users', {\n      payload: {\n        filter_conditions: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...defaultOptions,\n        ...options,\n      },\n    });\n\n    this.state.updateUsers(data.users);\n\n    return data;\n  }\n\n  /**\n   * queryBannedUsers - Query user bans\n   *\n   * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions\n   * @param {BannedUsersSort} sort Sort options [{created_at: 1}].\n   * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<BannedUsersResponse<ChannelType, CommandType, UserType>>} Ban Query Response\n   */\n  async queryBannedUsers(\n    filterConditions: BannedUsersFilters = {},\n    sort: BannedUsersSort = [],\n    options: BannedUsersPaginationOptions = {},\n  ) {\n    // Return a list of user bans\n    return await this.get<BannedUsersResponse<ChannelType, CommandType, UserType>>(\n      this.baseURL + '/query_banned_users',\n      {\n        payload: {\n          filter_conditions: filterConditions,\n          sort: normalizeQuerySort(sort),\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * queryMessageFlags - Query message flags\n   *\n   * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<MessageFlagsResponse<ChannelType, CommandType, UserType>>} Message Flags Response\n   */\n  async queryMessageFlags(\n    filterConditions: MessageFlagsFilters = {},\n    options: MessageFlagsPaginationOptions = {},\n  ) {\n    // Return a list of message flags\n    return await this.get<MessageFlagsResponse<ChannelType, CommandType, UserType>>(\n      this.baseURL + '/moderation/flags/message',\n      {\n        payload: {\n          filter_conditions: filterConditions,\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * queryChannels - Query channels\n   *\n   * @param {ChannelFilters<ChannelType, CommandType, UserType>} filterConditions object MongoDB style filters\n   * @param {ChannelSort<ChannelType>} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   *\n   * @return {Promise<APIResponse & { channels: Array<ChannelAPIResponse<AttachmentType,ChannelType,CommandType,MessageType,ReactionType,UserType>>}> } search channels response\n   */\n  async queryChannels(\n    filterConditions: ChannelFilters<ChannelType, CommandType, UserType>,\n    sort: ChannelSort<ChannelType> = [],\n    options: ChannelOptions = {},\n  ) {\n    const defaultOptions: ChannelOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.setUserPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    // Return a list of channels\n    const payload = {\n      filter_conditions: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...defaultOptions,\n      ...options,\n    };\n\n    const data = await this.post<{\n      channels: ChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >[];\n    }>(this.baseURL + '/channels', payload);\n\n    const channels: Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >[] = [];\n\n    // update our cache of the configs\n    for (const channelState of data.channels) {\n      this._addChannelConfig(channelState);\n    }\n\n    for (const channelState of data.channels) {\n      const c = this.channel(channelState.channel.type, channelState.channel.id);\n      c.data = channelState.channel;\n      c.initialized = true;\n      c._initializeState(channelState);\n      channels.push(c);\n    }\n    return channels;\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {ChannelFilters<ChannelType, CommandType, UserType>} filterConditions MongoDB style filter conditions\n   * @param {MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> | string} query search query or object MongoDB style filters\n   * @param {SearchOptions<MessageType>} [options] Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} search messages response\n   */\n  async search(\n    filterConditions: ChannelFilters<ChannelType, CommandType, UserType>,\n    query:\n      | string\n      | MessageFilters<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n    options: SearchOptions<MessageType> = {},\n  ) {\n    if (options.offset && (options.sort || options.next)) {\n      throw Error(`Cannot specify offset with sort or next parameters`);\n    }\n    const payload: SearchPayload<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {\n      filter_conditions: filterConditions,\n      ...options,\n      sort: options.sort\n        ? normalizeQuerySort<SearchMessageSortBase<MessageType>>(options.sort)\n        : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.setUserPromise;\n\n    return await this.get<\n      SearchAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.baseURL + '/search', {\n      payload,\n    });\n  }\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {'apn' | 'firebase'} push_provider the push provider (apn or firebase)\n   * @param {string} [userID] the user id (defaults to current user)\n   *\n   */\n  async addDevice(id: string, push_provider: 'apn' | 'firebase', userID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/devices', {\n      id,\n      push_provider,\n      ...(userID != null ? { user_id: userID } : {}),\n    });\n  }\n\n  /**\n   * getDevices - Returns the devices associated with a current user\n   *\n   * @param {string} [userID] User ID. Only works on serverside\n   *\n   * @return {APIResponse & Device<UserType>[]} Array of devices\n   */\n  async getDevices(userID?: string) {\n    return await this.get<APIResponse & { devices?: Device<UserType>[] }>(\n      this.baseURL + '/devices',\n      userID ? { user_id: userID } : {},\n    );\n  }\n\n  /**\n   * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   *\n   */\n  async removeDevice(id: string, userID?: string) {\n    return await this.delete<APIResponse>(this.baseURL + '/devices', {\n      id,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n\n  /**\n   * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.\n   * Only available server-side.\n   *\n   * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.\n   * @returns {Promise<GetRateLimitsResponse>}\n   */\n  async getRateLimits(params?: {\n    android?: boolean;\n    endpoints?: EndpointName[];\n    ios?: boolean;\n    serverSide?: boolean;\n    web?: boolean;\n  }) {\n    const { serverSide, web, android, ios, endpoints } = params || {};\n    return this.get<GetRateLimitsResponse>(this.baseURL + '/rate_limits', {\n      server_side: serverSide,\n      web,\n      android,\n      ios,\n      endpoints: endpoints ? endpoints.join(',') : undefined,\n    });\n  }\n\n  _addChannelConfig(\n    channelState: ChannelAPIResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this.configs[channelState.channel.type] = channelState.channel.config;\n  }\n\n  /**\n   * channel - Returns a new channel with the given type, id and custom data\n   *\n   * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.\n   * Make sure to await channel.create() or channel.watch() before accessing channel functions:\n   * ie. channel = client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n   * await channel.create() to assign an ID to channel\n   *\n   * @param {string} channelType The channel type\n   * @param {string | ChannelData<ChannelType> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  channel(\n    channelType: string,\n    channelID?: string | null,\n    custom?: ChannelData<ChannelType>,\n  ): Channel<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  channel(\n    channelType: string,\n    custom?: ChannelData<ChannelType>,\n  ): Channel<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  channel(\n    channelType: string,\n    channelIDOrCustom?: string | ChannelData<ChannelType> | null,\n    custom: ChannelData<ChannelType> = {} as ChannelData<ChannelType>,\n  ) {\n    if (!this.userID && !this._isUsingServerAuth()) {\n      throw Error('Call connectUser or connectAnonymousUser before creating a channel');\n    }\n\n    if (~channelType.indexOf(':')) {\n      throw Error(`Invalid channel group ${channelType}, can't contain the : character`);\n    }\n\n    // support channel(\"messaging\", null, {options})\n    // support channel(\"messaging\", undefined, {options})\n    // support channel(\"messaging\", \"\", {options})\n    if (channelIDOrCustom == null || channelIDOrCustom === '') {\n      return new Channel<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >(this, channelType, undefined, custom);\n    }\n\n    // support channel(\"messaging\", {options})\n    if (typeof channelIDOrCustom === 'object') {\n      return this.getChannelByMembers(channelType, channelIDOrCustom);\n    }\n\n    return this.getChannelById(channelType, channelIDOrCustom, custom);\n  }\n\n  /**\n   * It's a helper method for `client.channel()` method, used to create unique conversation or\n   * channel based on member list instead of id.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelByMembers = (channelType: string, custom: ChannelData<ChannelType>) => {\n    // Check if the channel already exists.\n    // Only allow 1 channel object per cid\n    const membersStr = [...(custom.members || [])].sort().join(',');\n    const tempCid = `${channelType}:!members-${membersStr}`;\n\n    if (!membersStr) {\n      throw Error('Please specify atleast one member when creating unique conversation');\n    }\n\n    // channel could exist in `activeChannels` list with either one of the following two keys:\n    // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n    // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n    //                        This is set when you create a channel, but haven't queried yet. After query,\n    //                        we will replace it with `cid`\n    for (const key in this.activeChannels) {\n      const channel = this.activeChannels[key];\n      if (channel.disconnected) {\n        continue;\n      }\n\n      if (key === tempCid) {\n        return channel;\n      }\n\n      if (key.indexOf(`${channelType}:!members-`) === 0) {\n        const membersStrInExistingChannel = Object.keys(channel.state.members)\n          .sort()\n          .join(',');\n        if (membersStrInExistingChannel === membersStr) {\n          return channel;\n        }\n      }\n    }\n\n    const channel = new Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >(this, channelType, undefined, custom);\n\n    // For the time being set the key as membersStr, since we don't know the cid yet.\n    // In channel.query, we will replace it with 'cid'.\n    this.activeChannels[tempCid] = channel;\n    return channel;\n  };\n\n  /**\n   * Its a helper method for `client.channel()` method, used to channel given the id of channel.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {string} [channelID] The channel ID\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelById = (\n    channelType: string,\n    channelID: string,\n    custom: ChannelData<ChannelType>,\n  ) => {\n    if (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n      throw Error(`Invalid channel id ${channelID}, can't contain the : character`);\n    }\n\n    // only allow 1 channel object per cid\n    const cid = `${channelType}:${channelID}`;\n    if (cid in this.activeChannels && !this.activeChannels[cid].disconnected) {\n      const channel = this.activeChannels[cid];\n      if (Object.keys(custom).length > 0) {\n        channel.data = custom;\n        channel._data = custom;\n      }\n      return channel;\n    }\n    const channel = new Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >(this, channelType, channelID, custom);\n    this.activeChannels[channel.cid] = channel;\n\n    return channel;\n  };\n\n  /**\n   * partialUpdateUser - Update the given user object\n   *\n   * @param {PartialUserUpdate<UserType>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n   * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>} list of updated users\n   */\n  async partialUpdateUser(partialUserObject: PartialUserUpdate<UserType>) {\n    return await this.partialUpdateUsers([partialUserObject]);\n  }\n\n  /**\n   * upsertUsers - Batch upsert the list of users\n   *\n   * @param {UserResponse<UserType>[]} users list of users\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  async upsertUsers(users: UserResponse<UserType>[]) {\n    const userMap: { [key: string]: UserResponse<UserType> } = {};\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n      userMap[userObject.id] = userObject;\n    }\n\n    return await this.post<\n      APIResponse & {\n        users: { [key: string]: UserResponse<UserType> };\n      }\n    >(this.baseURL + '/users', {\n      users: userMap,\n    });\n  }\n\n  /**\n   * @deprecated Please use upsertUsers() function instead.\n   *\n   * updateUsers - Batch update the list of users\n   *\n   * @param {UserResponse<UserType>[]} users list of users\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  updateUsers = this.upsertUsers;\n\n  /**\n   * upsertUser - Update or Create the given user object\n   *\n   * @param {UserResponse<UserType>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  upsertUser(userObject: UserResponse<UserType>) {\n    return this.upsertUsers([userObject]);\n  }\n\n  /**\n   * @deprecated Please use upsertUser() function instead.\n   *\n   * updateUser - Update or Create the given user object\n   *\n   * @param {UserResponse<UserType>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  updateUser = this.upsertUser;\n\n  /**\n   * partialUpdateUsers - Batch partial update of users\n   *\n   * @param {PartialUserUpdate<UserType>[]} users list of partial update requests\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  async partialUpdateUsers(users: PartialUserUpdate<UserType>[]) {\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n    }\n\n    return await this.patch<\n      APIResponse & {\n        users: { [key: string]: UserResponse<UserType> };\n      }\n    >(this.baseURL + '/users', {\n      users,\n    });\n  }\n\n  async deleteUser(\n    userID: string,\n    params?: {\n      delete_conversation_channels?: boolean;\n      hard_delete?: boolean;\n      mark_messages_deleted?: boolean;\n    },\n  ) {\n    return await this.delete<\n      APIResponse & {\n        user: UserResponse<UserType>;\n      }\n    >(this.baseURL + `/users/${userID}`, params);\n  }\n\n  async reactivateUser(\n    userID: string,\n    options?: { created_by_id?: string; name?: string; restore_messages?: boolean },\n  ) {\n    return await this.post<\n      APIResponse & {\n        user: UserResponse<UserType>;\n      }\n    >(this.baseURL + `/users/${userID}/reactivate`, {\n      ...options,\n    });\n  }\n\n  async deactivateUser(\n    userID: string,\n    options?: { created_by_id?: string; mark_messages_deleted?: boolean },\n  ) {\n    return await this.post<APIResponse & { user: UserResponse<UserType> }>(\n      this.baseURL + `/users/${userID}/deactivate`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  async exportUser(userID: string, options?: Record<string, string>) {\n    return await this.get<\n      APIResponse & {\n        messages: MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >[];\n        reactions: ReactionResponse<ReactionType, UserType>[];\n        user: UserResponse<UserType>;\n      }\n    >(this.baseURL + `/users/${userID}/export`, {\n      ...options,\n    });\n  }\n\n  /** banUser - bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options?: BanUserOptions<UserType>) {\n    if (options?.user_id !== undefined) {\n      options.banned_by_id = options.user_id;\n      delete options.user_id;\n      console.warn(\n        \"banUser: 'user_id' is deprecated, please consider switching to 'banned_by_id'\",\n      );\n    }\n    if (options?.user !== undefined) {\n      options.banned_by = options.user;\n      delete options.user;\n      console.warn(\n        \"banUser: 'user' is deprecated, please consider switching to 'banned_by'\",\n      );\n    }\n    return await this.post<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** unbanUser - revoke global ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.delete<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** shadowBan - shadow bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options?: BanUserOptions<UserType>) {\n    return await this.banUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** removeShadowBan - revoke global shadow ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.unbanUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** muteUser - mutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [userID] Only used with serverside auth\n   * @param {MuteUserOptions<UserType>} [options]\n   * @returns {Promise<MuteUserResponse<ChannelType, CommandType, UserType>>}\n   */\n  async muteUser(\n    targetID: string,\n    userID?: string,\n    options: MuteUserOptions<UserType> = {},\n  ) {\n    return await this.post<MuteUserResponse<ChannelType, CommandType, UserType>>(\n      this.baseURL + '/moderation/mute',\n      {\n        target_id: targetID,\n        ...(userID ? { user_id: userID } : {}),\n        ...options,\n      },\n    );\n  }\n\n  /** unmuteUser - unmutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [currentUserID] Only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unmuteUser(targetID: string, currentUserID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unmute', {\n      target_id: targetID,\n      ...(currentUserID ? { user_id: currentUserID } : {}),\n    });\n  }\n\n  /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called\n   *\n   * @param {string} targetID\n   * @returns {boolean}\n   */\n  userMuteStatus(targetID: string) {\n    if (!this.user || !this.wsPromise) {\n      throw new Error('Make sure to await connectUser() first.');\n    }\n\n    for (let i = 0; i < this.mutedUsers.length; i += 1) {\n      if (this.mutedUsers[i].target.id === targetID) return true;\n    }\n    return false;\n  }\n\n  /**\n   * flagMessage - flag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<UserType>>(\n      this.baseURL + '/moderation/flag',\n      {\n        target_message_id: targetMessageID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * flagUser - flag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<UserType>>(\n      this.baseURL + '/moderation/flag',\n      {\n        target_user_id: targetID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * unflagMessage - unflag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<UserType>>(\n      this.baseURL + '/moderation/unflag',\n      {\n        target_message_id: targetMessageID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * unflagUser - unflag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<UserType>>(\n      this.baseURL + '/moderation/unflag',\n      {\n        target_user_id: targetID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * markAllRead - marks all channels for this user as read\n   * @param {MarkAllReadOptions<UserType>} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  async markAllRead(data: MarkAllReadOptions<UserType> = {}) {\n    await this.post<APIResponse>(this.baseURL + '/channels/read', {\n      ...data,\n    });\n  }\n\n  createCommand(data: CreateCommandOptions<CommandType>) {\n    return this.post<CreateCommandResponse<CommandType>>(\n      this.baseURL + '/commands',\n      data,\n    );\n  }\n\n  getCommand(name: string) {\n    return this.get<GetCommandResponse<CommandType>>(this.baseURL + `/commands/${name}`);\n  }\n\n  updateCommand(name: string, data: UpdateCommandOptions<CommandType>) {\n    return this.put<UpdateCommandResponse<CommandType>>(\n      this.baseURL + `/commands/${name}`,\n      data,\n    );\n  }\n\n  deleteCommand(name: string) {\n    return this.delete<DeleteCommandResponse<CommandType>>(\n      this.baseURL + `/commands/${name}`,\n    );\n  }\n\n  listCommands() {\n    return this.get<ListCommandsResponse<CommandType>>(this.baseURL + `/commands`);\n  }\n\n  createChannelType(data: CreateChannelOptions<CommandType>) {\n    const channelData = Object.assign({}, { commands: ['all'] }, data);\n    return this.post<CreateChannelResponse<CommandType>>(\n      this.baseURL + '/channeltypes',\n      channelData,\n    );\n  }\n\n  getChannelType(channelType: string) {\n    return this.get<GetChannelTypeResponse<CommandType>>(\n      this.baseURL + `/channeltypes/${channelType}`,\n    );\n  }\n\n  updateChannelType(channelType: string, data: UpdateChannelOptions<CommandType>) {\n    return this.put<UpdateChannelResponse<CommandType>>(\n      this.baseURL + `/channeltypes/${channelType}`,\n      data,\n    );\n  }\n\n  deleteChannelType(channelType: string) {\n    return this.delete<APIResponse>(this.baseURL + `/channeltypes/${channelType}`);\n  }\n\n  listChannelTypes() {\n    return this.get<ListChannelResponse<CommandType>>(this.baseURL + `/channeltypes`);\n  }\n\n  /**\n   * translateMessage - adds the translation to the message\n   *\n   * @param {string} messageId\n   * @param {string} language\n   *\n   * @return {APIResponse & MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} Response that includes the message\n   */\n  async translateMessage(messageId: string, language: string) {\n    return await this.post<\n      APIResponse &\n        MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n    >(this.baseURL + `/messages/${messageId}/translate`, {\n      language,\n    });\n  }\n\n  /**\n   * _normalizeExpiration - transforms expiration value into ISO string\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   */\n  _normalizeExpiration(timeoutOrExpirationDate?: null | number | string | Date) {\n    let pinExpires: undefined | string;\n    if (typeof timeoutOrExpirationDate === 'number') {\n      const now = new Date();\n      now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n      pinExpires = now.toISOString();\n    } else if (isString(timeoutOrExpirationDate)) {\n      pinExpires = timeoutOrExpirationDate;\n    } else if (timeoutOrExpirationDate instanceof Date) {\n      pinExpires = timeoutOrExpirationDate.toISOString();\n    }\n    return pinExpires;\n  }\n\n  /**\n   * _messageId - extracts string message id from either message object or message id\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string} errorText error message to report in case of message id absence\n   */\n  _validateAndGetMessageId(\n    messageOrMessageId: string | { id: string },\n    errorText: string,\n  ) {\n    let messageId: string;\n    if (typeof messageOrMessageId === 'string') {\n      messageId = messageOrMessageId;\n    } else {\n      if (!messageOrMessageId.id) {\n        throw Error(errorText);\n      }\n      messageId = messageOrMessageId.id;\n    }\n    return messageId;\n  }\n\n  /**\n   * pinMessage - pins the message\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   * @param {string | { id: string }} [userId]\n   */\n  pinMessage(\n    messageOrMessageId: string | { id: string },\n    timeoutOrExpirationDate?: null | number | string | Date,\n    userId?: string | { id: string },\n  ) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      {\n        set: {\n          pinned: true,\n          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n        },\n      },\n      userId,\n    );\n  }\n\n  /**\n   * unpinMessage - unpins the message that was previously pinned\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string | { id: string }} [userId]\n   */\n  unpinMessage(\n    messageOrMessageId: string | { id: string },\n    userId?: string | { id: string },\n  ) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      {\n        set: {\n          pinned: false,\n        },\n      },\n      userId,\n    );\n  }\n\n  /**\n   * updateMessage - Update the given message\n   *\n   * @param {Omit<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n   * @param {string | { id: string }} [userId]\n   *\n   * @return {APIResponse & { message: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> }} Response that includes the message\n   */\n  async updateMessage(\n    message: UpdatedMessage<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    userId?: string | { id: string },\n  ) {\n    if (!message.id) {\n      throw Error('Please specify the message id when calling updateMessage');\n    }\n\n    const clonedMessage: Message = Object.assign({}, message);\n    delete clonedMessage.id;\n\n    const reservedMessageFields: Array<\n      | 'command'\n      | 'created_at'\n      | 'html'\n      | 'latest_reactions'\n      | 'own_reactions'\n      | 'reaction_counts'\n      | 'reply_count'\n      | 'type'\n      | 'updated_at'\n      | 'user'\n      | '__html'\n    > = [\n      'command',\n      'created_at',\n      'html',\n      'latest_reactions',\n      'own_reactions',\n      'reaction_counts',\n      'reply_count',\n      'type',\n      'updated_at',\n      'user',\n      '__html',\n    ];\n\n    reservedMessageFields.forEach(function (item) {\n      if (clonedMessage[item] != null) {\n        delete clonedMessage[item];\n      }\n    });\n\n    if (userId != null) {\n      if (isString(userId)) {\n        clonedMessage.user_id = userId;\n      } else {\n        clonedMessage.user = { id: userId.id } as UserResponse<UserType>;\n      }\n    }\n\n    /**\n     * Server always expects mentioned_users to be array of string. We are adding extra check, just in case\n     * SDK missed this conversion.\n     */\n    if (\n      Array.isArray(clonedMessage.mentioned_users) &&\n      !isString(clonedMessage.mentioned_users[0])\n    ) {\n      clonedMessage.mentioned_users = clonedMessage.mentioned_users.map(\n        (mu) => ((mu as unknown) as UserResponse).id,\n      );\n    }\n\n    return await this.post<\n      UpdateMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.baseURL + `/messages/${message.id}`, {\n      message: clonedMessage,\n    });\n  }\n\n  /**\n   * partialUpdateMessage - Update the given message id while retaining additional properties\n   *\n   * @param {string} id the message id\n   *\n   * @param {PartialUpdateMessage<MessageType>}  partialMessageObject which should contain id and any of \"set\" or \"unset\" params;\n   *         example: {id: \"user1\", set:{text: \"hi\"}, unset:[\"color\"]}\n   * @param {string | { id: string }} [userId]\n   *\n   * @return {APIResponse & { message: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> }} Response that includes the updated message\n   */\n  async partialUpdateMessage(\n    id: string,\n    partialMessageObject: PartialMessageUpdate<MessageType>,\n    userId?: string | { id: string },\n  ) {\n    if (!id) {\n      throw Error('Please specify the message id when calling partialUpdateMessage');\n    }\n    let user = userId;\n    if (userId != null && isString(userId)) {\n      user = { id: userId };\n    }\n    return await this.put<\n      UpdateMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.baseURL + `/messages/${id}`, {\n      ...partialMessageObject,\n      user,\n    });\n  }\n\n  async deleteMessage(messageID: string, hardDelete?: boolean) {\n    let params = {};\n    if (hardDelete) {\n      params = { hard: true };\n    }\n    return await this.delete<\n      APIResponse & {\n        message: MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >;\n      }\n    >(this.baseURL + `/messages/${messageID}`, params);\n  }\n\n  async getMessage(messageID: string) {\n    return await this.get<\n      APIResponse & {\n        message: MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >;\n      }\n    >(this.baseURL + `/messages/${messageID}`);\n  }\n\n  getUserAgent() {\n    return (\n      this.userAgent ||\n      `stream-chat-javascript-client-${this.node ? 'node' : 'browser'}-${\n        process.env.PKG_VERSION\n      }`\n    );\n  }\n\n  setUserAgent(userAgent: string) {\n    this.userAgent = userAgent;\n  }\n\n  /**\n   * _isUsingServerAuth - Returns true if we're using server side auth\n   */\n  _isUsingServerAuth = () => !!this.secret;\n\n  _enrichAxiosOptions(\n    options: AxiosRequestConfig & { config?: AxiosRequestConfig } = {\n      params: {},\n      headers: {},\n      config: {},\n    },\n  ) {\n    const token = this._getToken();\n\n    return {\n      params: {\n        user_id: this.userID,\n        ...options.params,\n        api_key: this.key,\n        connection_id: this.wsConnection?.connectionID,\n      },\n      headers: {\n        Authorization: token,\n        'stream-auth-type': this.getAuthType(),\n        'X-Stream-Client': this.getUserAgent(),\n        ...options.headers,\n      },\n      ...options.config,\n    };\n  }\n\n  _getToken() {\n    if (!this.tokenManager || this.anonymous) return null;\n\n    return this.tokenManager.getToken();\n  }\n\n  _startCleaning() {\n    const that = this;\n    if (this.cleaningIntervalRef != null) {\n      return;\n    }\n    this.cleaningIntervalRef = setInterval(() => {\n      // call clean on the channel, used for calling the stop.typing event etc.\n      for (const channel of Object.values(that.activeChannels)) {\n        channel.clean();\n      }\n    }, 500);\n  }\n\n  verifyWebhook(requestBody: string, xSignature: string) {\n    return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n  }\n\n  /** getPermission - gets the definition for a permission\n   *\n   * @param {string} name\n   * @returns {Promise<PermissionAPIResponse>}\n   */\n  getPermission(name: string) {\n    return this.get<PermissionAPIResponse>(`${this.baseURL}/permissions/${name}`);\n  }\n\n  /** createPermission - creates a custom permission\n   *\n   * @param {CustomPermissionOptions} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  createPermission(permissionData: CustomPermissionOptions) {\n    return this.post<APIResponse>(`${this.baseURL}/permissions`, {\n      ...permissionData,\n    });\n  }\n\n  /** updatePermission - updates an existing custom permission\n   *\n   * @param {string} id\n   * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  updatePermission(id: string, permissionData: Omit<CustomPermissionOptions, 'id'>) {\n    return this.put<APIResponse>(`${this.baseURL}/permissions/${id}`, {\n      ...permissionData,\n    });\n  }\n\n  /** deletePermission - deletes a custom permission\n   *\n   * @param {string} name\n   * @returns {Promise<APIResponse>}\n   */\n  deletePermission(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/permissions/${name}`);\n  }\n\n  /** listPermissions - returns the list of all permissions for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listPermissions() {\n    return this.get<PermissionsAPIResponse>(`${this.baseURL}/permissions`);\n  }\n\n  /** createRole - creates a custom role\n   *\n   * @param {string} name the new role name\n   * @returns {Promise<APIResponse>}\n   */\n  createRole(name: string) {\n    return this.post<APIResponse>(`${this.baseURL}/roles`, { name });\n  }\n\n  /** listRoles - returns the list of all roles for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listRoles() {\n    return this.get<APIResponse>(`${this.baseURL}/roles`);\n  }\n\n  /** deleteRole - deletes a custom role\n   *\n   * @param {string} name the role name\n   * @returns {Promise<APIResponse>}\n   */\n  deleteRole(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/roles/${name}`);\n  }\n\n  /** sync - returns all events that happened for a list of channels since last sync\n   * @param {string[]} channel_cids list of channel CIDs\n   * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n   */\n  sync(channel_cids: string[], last_sync_at: string) {\n    return this.post<\n      APIResponse & {\n        events: Event<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >[];\n      }\n    >(`${this.baseURL}/sync`, {\n      channel_cids,\n      last_sync_at,\n    });\n  }\n\n  /**\n   * sendUserCustomEvent - Send a custom event to a user\n   *\n   * @param {string} targetUserID target user id\n   * @param {UserCustomEvent} event for example {type: 'friendship-request'}\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async sendUserCustomEvent(targetUserID: string, event: UserCustomEvent) {\n    return await this.post<APIResponse>(`${this.baseURL}/users/${targetUserID}/event`, {\n      event,\n    });\n  }\n\n  createBlockList(blockList: BlockList) {\n    return this.post<APIResponse>(`${this.baseURL}/blocklists`, blockList);\n  }\n\n  listBlockLists() {\n    return this.get<APIResponse & { blocklists: BlockListResponse[] }>(\n      `${this.baseURL}/blocklists`,\n    );\n  }\n\n  getBlockList(name: string) {\n    return this.get<APIResponse & { blocklist: BlockListResponse }>(\n      `${this.baseURL}/blocklists/${name}`,\n    );\n  }\n\n  updateBlockList(name: string, data: { words: string[] }) {\n    return this.put<APIResponse>(`${this.baseURL}/blocklists/${name}`, data);\n  }\n\n  deleteBlockList(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/blocklists/${name}`);\n  }\n\n  exportChannels(request: Array<ExportChannelRequest>) {\n    const payload = {\n      channels: request,\n    };\n    return this.post<APIResponse & ExportChannelResponse>(\n      `${this.baseURL}/export_channels`,\n      payload,\n    );\n  }\n\n  exportChannel(request: ExportChannelRequest) {\n    return this.exportChannels([request]);\n  }\n\n  getExportChannelStatus(id: string) {\n    return this.get<APIResponse & ExportChannelStatusResponse>(\n      `${this.baseURL}/export_channels/${id}`,\n    );\n  }\n\n  /**\n   * createSegment - Creates a Campaign Segment\n   *\n   * @param {SegmentData} params Segment data\n   *\n   * @return {Segment} The Created Segment\n   */\n  async createSegment(params: SegmentData) {\n    const { segment } = await this.post<{ segment: Segment }>(\n      this.baseURL + `/segments`,\n      { segment: params },\n    );\n    return segment;\n  }\n\n  /**\n   * getSegment - Get a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   *\n   * @return {Segment} A Segment\n   */\n  async getSegment(id: string) {\n    const { segment } = await this.get<{ segment: Segment }>(\n      this.baseURL + `/segments/${id}`,\n    );\n    return segment;\n  }\n\n  /**\n   * listSegments - List Campaign Segments\n   *\n   *\n   * @return {Segment[]} Segments\n   */\n  async listSegments() {\n    const { segments } = await this.get<{ segments: Segment[] }>(\n      this.baseURL + `/segments`,\n    );\n    return segments;\n  }\n\n  /**\n   * updateSegment - Update a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   * @param {Partial<SegmentData>} params Segment data\n   *\n   * @return {Segment} Updated Segment\n   */\n  async updateSegment(id: string, params: Partial<SegmentData>) {\n    const { segment } = await this.put<{ segment: Segment }>(\n      this.baseURL + `/segments/${id}`,\n      params,\n    );\n    return segment;\n  }\n\n  /**\n   * deleteSegment - Delete a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteSegment(id: string) {\n    return this.delete<APIResponse>(this.baseURL + `/segments/${id}`);\n  }\n\n  /**\n   * createCampaign - Creates a Campaign\n   *\n   * @param {CampaignData} params Campaign data\n   *\n   * @return {Campaign} The Created Campaign\n   */\n  async createCampaign(params: CampaignData) {\n    const { campaign } = await this.post<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns`,\n      { campaign: params },\n    );\n    return campaign;\n  }\n\n  /**\n   * getCampaign - Get a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} A Campaign\n   */\n  async getCampaign(id: string) {\n    const { campaign } = await this.get<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}`,\n    );\n    return campaign;\n  }\n\n  /**\n   * listCampaigns - List Campaigns\n   *\n   *\n   * @return {Campaign[]} Campaigns\n   */\n  async listCampaigns() {\n    const { campaigns } = await this.get<{ campaigns: Campaign[] }>(\n      this.baseURL + `/campaigns`,\n    );\n    return campaigns;\n  }\n\n  /**\n   * updateCampaign - Update a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {Partial<CampaignData>} params Campaign data\n   *\n   * @return {Campaign} Updated Campaign\n   */\n  async updateCampaign(id: string, params: Partial<CampaignData>) {\n    const { campaign } = await this.put<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}`,\n      params,\n    );\n    return campaign;\n  }\n\n  /**\n   * deleteCampaign - Delete a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteCampaign(id: string) {\n    return this.delete<APIResponse>(this.baseURL + `/campaigns/${id}`);\n  }\n\n  /**\n   * scheduleCampaign - Schedule a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {{sendAt: number}} params Schedule params\n   *\n   * @return {Campaign} Scheduled Campaign\n   */\n  async scheduleCampaign(id: string, params: { sendAt: number }) {\n    const { sendAt } = params;\n    const { campaign } = await this.patch<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}/schedule`,\n      { send_at: sendAt },\n    );\n    return campaign;\n  }\n\n  /**\n   * stopCampaign - Stop a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Stopped Campaign\n   */\n  async stopCampaign(id: string) {\n    const { campaign } = await this.patch<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}/stop`,\n    );\n    return campaign;\n  }\n\n  /**\n   * resumeCampaign - Resume a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Resumed Campaign\n   */\n  async resumeCampaign(id: string) {\n    const { campaign } = await this.patch<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}/resume`,\n    );\n    return campaign;\n  }\n\n  /**\n   * testCampaign - Test a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {{users: string[]}} params Test params\n   * @return {Campaign} Test Campaign\n   */\n  async testCampaign(id: string, params: { users: string[] }) {\n    const { users } = params;\n    const { campaign } = await this.post<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}/test`,\n      { users },\n    );\n    return campaign;\n  }\n}\n","import { PermissionObject } from './types';\n\ntype RequiredPermissionObject = Required<PermissionObject>;\n\nexport const Allow = 'Allow';\nexport const Deny = 'Deny';\nexport const AnyResource = ['*'];\nexport const AnyRole = ['*'];\nexport const MaxPriority = 999;\nexport const MinPriority = 1;\n\n// deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\n\nexport class Permission {\n  name: RequiredPermissionObject['name'];\n  action: RequiredPermissionObject['action'];\n  owner: RequiredPermissionObject['owner'];\n  priority: RequiredPermissionObject['priority'];\n  resources: RequiredPermissionObject['resources'];\n  roles: RequiredPermissionObject['roles'];\n  constructor(\n    name: string,\n    priority: number,\n    resources = AnyResource,\n    roles = AnyRole,\n    owner = false,\n    action: RequiredPermissionObject['action'] = Allow,\n  ) {\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n  }\n}\n\n// deprecated\nexport const AllowAll = new Permission(\n  'Allow all',\n  MaxPriority,\n  AnyResource,\n  AnyRole,\n  false,\n  Allow,\n);\n\n// deprecated\nexport const DenyAll = new Permission(\n  'Deny all',\n  MinPriority,\n  AnyResource,\n  AnyRole,\n  false,\n  Deny,\n);\n\nexport type Role =\n  | 'admin'\n  | 'user'\n  | 'guest'\n  | 'anonymous'\n  | 'channel_member'\n  | 'channel_moderator'\n  | string;\n\nexport const BuiltinRoles = {\n  Admin: 'admin',\n  Anonymous: 'anonymous',\n  ChannelMember: 'channel_member',\n  ChannelModerator: 'channel_moderator',\n  Guest: 'guest',\n  User: 'user',\n};\n\nexport const BuiltinPermissions = {\n  AddLinks: 'Add Links',\n  BanUser: 'Ban User',\n  CreateChannel: 'Create Channel',\n  CreateMessage: 'Create Message',\n  CreateReaction: 'Create Reaction',\n  DeleteAnyAttachment: 'Delete Any Attachment',\n  DeleteAnyChannel: 'Delete Any Channel',\n  DeleteAnyMessage: 'Delete Any Message',\n  DeleteAnyReaction: 'Delete Any Reaction',\n  DeleteOwnAttachment: 'Delete Own Attachment',\n  DeleteOwnChannel: 'Delete Own Channel',\n  DeleteOwnMessage: 'Delete Own Message',\n  DeleteOwnReaction: 'Delete Own Reaction',\n  ReadAnyChannel: 'Read Any Channel',\n  ReadOwnChannel: 'Read Own Channel',\n  RunMessageAction: 'Run Message Action',\n  UpdateAnyChannel: 'Update Any Channel',\n  UpdateAnyMessage: 'Update Any Message',\n  UpdateMembersAnyChannel: 'Update Members Any Channel',\n  UpdateMembersOwnChannel: 'Update Members Own Channel',\n  UpdateOwnChannel: 'Update Own Channel',\n  UpdateOwnMessage: 'Update Own Message',\n  UploadAttachment: 'Upload Attachment',\n  UseFrozenChannel: 'Send messages and reactions to frozen channels',\n};\n"],"names":["isString","arrayOrString","isMapStringCallback","callback","map","res","k","len","length","charAt","kValue","mappedValue","encodeBase64","data","fromByteArray","Uint8Array","char","charCodeAt","decodeBase64","s","e","w","String","fromCharCode","L","i","b","c","x","l","a","r","A","ChannelState","channel","isUpToDate","msgArray","msg","result","filter","message","id","removed","user","_updateUserMessages","messages","m","parentId","threads","pinnedMessages","hardDelete","_deleteUserMessages","cid","created_at","deleted_at","latest_reactions","mentioned_users","own_reactions","parent_id","reply_count","status","thread_participants","type","updated_at","_channel","watcher_count","typing","read","mutedUsers","watchers","members","membership","unreadCount","last_message_at","state","Date","newMessage","timestampChanged","addIfDoesNotExist","addMessagesSorted","__html","html","pinned_at","newMessages","initializing","formatMessage","getClient","updateUserReference","getTime","parentID","show_in_channel","_addToMessageList","thread","threadMessages","addPinnedMessage","pinnedMessage","removeMessageFromArray","reaction","enforce_unique","messageWithReaction","_updateMessage","_addOwnReactionToMessage","ownReactions","_removeOwnReactionFromMessage","userID","user_id","push","item","parseMessage","toString","updatedMessages","quoted_message_id","quoted_message","attachments","updateFunc","pinned","msgIndex","findIndex","sortBy","addMessageToList","messageArr","messageArrayLength","concat","messageTime","messageIsNewest","left","middle","right","Math","floor","splice","messageToRemove","isRemoved","filteredMessages","now","Object","entries","lastEvent","receivedAt","received_at","dispatchEvent","EVENT_MAP","IS_VALID_EVENT_MAP_TYPE","all","isValidEventType","eventType","logChatPromiseExecution","promise","name","then","catch","error","console","warn","sleep","Promise","setTimeout","isFunction","value","prototype","call","Function","chatCodes","TOKEN_EXPIRED","WS_CLOSED_SUCCESS","isReadableStream","obj","_typeof","readable","_read","isBuffer","constructor","isFileWebAPI","uri","window","File","isOwnUser","total_unread_count","undefined","isOwnUserBaseProperty","property","ownUserBaseProperties","channel_mutes","devices","mutes","unread_channels","unread_count","invisible","roles","addFileToFormData","contentType","FormData","append","split","reverse","normalizeQuerySort","sort","sortFields","sortArr","Array","isArray","field","direction","retryInterval","numberOfFailures","max","min","random","alphabet","randomId","Channel","client","options","watch","presence","query","event","listeners","listener","Error","baseURL","validTypeRe","validIDRe","test","_client","_data","initialized","lastTypingEvent","isTyping","disconnected","configs","post","_channelURL","sendMessageResponse","sendFile","url","delete","_checkInitialized","offset","next","payload","filter_conditions","message_filter_conditions","wsPromise","get","filterConditions","messageID","keys","reactionType","channelData","updateMessage","reserved","forEach","key","_update","update","patch","coolDownInterval","cooldown","accept_invite","reject_invite","add_members","add_moderators","assign_roles","invites","remove_members","demote_moderators","opts","channel_cid","_muteStatus","formData","message_id","form_data","getConfig","typing_events","diff","lastKeyStroke","sendEvent","messageSlice","slice","read_events","resolve","stopTyping","clean","defaultOptions","_hasConnectionID","combined","logger","tags","response","messageIds","ids","join","last_read","shadowed","silent","userMuteStatus","muteStatus","muted","lastRead","count","_countMessageAsUnread","some","queryURL","membersStr","member","tempChannelCid","activeChannels","_addChannelConfig","_initializeState","targetUserID","banUser","userId","clearHistory","clear_history","unbanUser","shadowBan","removeShadowBan","callbackOrString","callbackOrNothing","valid","unsubscribe","el","channelState","hard_delete","removeMessage","addMessageSorted","removeQuotedMessageReferences","removePinnedMessage","ownMessage","isThreadMessage","clearMessages","addReaction","removeReaction","_isUsingServerAuth","clientState","addPinnedMessages","pinned_messages","watcher","parsedRead","unread_messages","setIsUpToDate","ClientState","users","userChannelReferences","updateUser","channelID","isCloseEvent","code","isErrorEvent","StableWSConnection","apiKey","authType","clientID","eventCallback","messageCallback","recoverCallback","tokenManager","userAgent","wsBaseURL","params","user_details","user_token","getToken","server_determines_connection_id","qs","encodeURIComponent","JSON","stringify","token","_setHealth","isHealthy","_reconnect","interval","wsID","parse","isResolved","rejectPromise","_errorFromWSEvent","resolvePromise","scheduleNextPing","scheduleConnectionCheck","reason","consecutiveFailures","totalFailures","healthy","online","isWSFailure","statusCode","StatusCode","addEventListener","onlineStatusChanged","removeEventListener","that","connectionOpen","reject","healthCheckTimeoutRef","clearTimeout","client_id","ws","send","pingInterval","connectionCheckTimeoutRef","connectionCheckTimeout","isConnecting","_listenForConnectionChanges","_connect","healthCheck","isStatic","refreshToken","timeout","clearInterval","_removeConnectionListeners","removeAllListeners","isClosedPromise","close","readyState","OPEN","onclose","tokenReady","_setupConnectionPromise","wsURL","_buildUrl","WebSocket","onopen","bind","onerror","onmessage","connectionID","connection_id","_destroyCurrentWSConnection","loadToken","open","JWTUserToken","apiSecret","extraData","jwtOptions","TypeError","_extends","algorithm","noTimestamp","JWTServerToken","server","jwt","sign","UserFromToken","fragments","b64Payload","DevToken","CheckSignature","body","secret","signature","Buffer","from","hash","crypto","createHmac","digest","TokenManager","tokenOrProvider","validateToken","tokenProvider","loadTokenPromise","anon","tokenUserId","StreamChat","secretOrOptions","Boolean","wsConnection","userTokenOrProvider","setUserPromise","node","allowServerSideConnect","anonymous","setTokenPromise","_setToken","_setUser","openConnection","connectUser","setTokenOrProvider","cleaningIntervalRef","disconnect","connect","_startCleaning","before","toISOString","_user","closePromise","closeConnection","values","_disconnect","reset","disconnectUser","anonymousUser","_setupConnection","connectAnonymousUser","requestConfig","_enrichAxiosOptions","_logApiRequest","axiosInstance","put","_logApiResponse","handleResponse","_logApiError","doAxiosRequest","postListenerCallbacks","_handleClientEvent","_handleChannelEvent","_callClientListeners","_callChannelListeners","messageEvent","jsonString","refMap","_updateMemberWatcherReferences","updateUserMessages","deleteUserMessages","_updateUserMessageReferences","mark_messages_deleted","_deleteUserMessageReference","cids","recoverStateOnReconnect","queryChannels","$in","limit","channelType","custom","_toConsumableArray","tempCid","indexOf","membersStrInExistingChannel","upsertUsers","upsertUser","mutedChannels","inputOptions","browser","withCredentials","warmUp","httpsAgent","https","Agent","keepAlive","keepAliveMsecs","axios","create","setBaseURL","process","env","STREAM_LOCAL_TEST_RUN","STREAM_LOCAL_TEST_HOST","replace","apn_config","p12_cert","updateAppSettings","revoke_tokens_issued_before","_normalizeDate","revokeUsersToken","userIDs","set","partialUpdateUsers","apnTemplate","apn_template","firebaseTemplate","firebase_template","firebaseDataTemplate","firebase_data_template","skipDevices","skip_devices","last_active","guestUser","access_token","exp","iat","extra","config","headers","getHeaders","maxContentLength","Infinity","maxBodyLength","err","errorFromResponse","_handleUserEvent","me","currentMutedChannelIds","nextMutedChannelIds","mute","includes","deleteAllChannelReference","expires","createdAt","expiresAt","connecting","failures","getAuthType","getUserAgent","recoverState","handleEvent","warmUpPromise","handshake","updateUsers","channels","push_provider","serverSide","web","android","ios","endpoints","server_side","channelIDOrCustom","getChannelByMembers","getChannelById","partialUserObject","userMap","userObject","banned_by_id","banned_by","target_user_id","shadow","targetID","target_id","currentUserID","target","targetMessageID","target_message_id","commands","messageId","language","timeoutOrExpirationDate","pinExpires","setSeconds","getSeconds","messageOrMessageId","errorText","_validateAndGetMessageId","partialUpdateMessage","pin_expires","_normalizeExpiration","clonedMessage","reservedMessageFields","mu","partialMessageObject","hard","_getToken","api_key","Authorization","setInterval","requestBody","xSignature","permissionData","channel_cids","last_sync_at","blockList","request","exportChannels","segment","segments","campaign","campaigns","sendAt","send_at","_instance","Allow","Deny","AnyResource","AnyRole","MaxPriority","MinPriority","Permission","priority","resources","owner","action","AllowAll","DenyAll","BuiltinRoles","Admin","Anonymous","ChannelMember","ChannelModerator","Guest","User","BuiltinPermissions","AddLinks","BanUser","CreateChannel","CreateMessage","CreateReaction","DeleteAnyAttachment","DeleteAnyChannel","DeleteAnyMessage","DeleteAnyReaction","DeleteOwnAttachment","DeleteOwnChannel","DeleteOwnMessage","DeleteOwnReaction","ReadAnyChannel","ReadOwnChannel","RunMessageAction","UpdateAnyChannel","UpdateAnyMessage","UpdateMembersAnyChannel","UpdateMembersOwnChannel","UpdateOwnChannel","UpdateOwnMessage","UploadAttachment","UseFrozenChannel"],"mappings":"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"}